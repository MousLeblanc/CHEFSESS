// scripts/generate-protein-menu.js
// G√©n√©rateur de menu riche en prot√©ines avec OpenAI + base de donn√©es d'ingr√©dients

import dotenv from 'dotenv';
import openai from '../services/openaiClient.js';
import { ingredientsDatabase, getIngredientData, getIngredientsByCategory } from './ingredients-database.js';

dotenv.config();

/**
 * Filtre les ingr√©dients riches en prot√©ines (> 15g/100g)
 */
function getHighProteinIngredients() {
  const highProteinIngredients = [];
  
  for (const [name, data] of Object.entries(ingredientsDatabase)) {
    if (data.nutritionalValues.proteins >= 15) {
      highProteinIngredients.push({
        name: name,
        category: data.category,
        proteins: data.nutritionalValues.proteins,
        calories: data.nutritionalValues.calories,
        nutritionalValues: data.nutritionalValues
      });
    }
  }
  
  return highProteinIngredients.sort((a, b) => b.proteins - a.proteins);
}

/**
 * Calcule les valeurs nutritionnelles totales d'un menu
 */
function calculateMenuNutrition(ingredients) {
  const totals = {
    calories: 0,
    proteins: 0,
    carbs: 0,
    lipids: 0,
    fibers: 0
  };
  
  ingredients.forEach(ing => {
    // Calculer en fonction de la quantit√© (en grammes)
    const quantity = ing.quantity || 100;
    const factor = quantity / 100;
    
    totals.calories += (ing.nutritionalValues.calories || 0) * factor;
    totals.proteins += (ing.nutritionalValues.proteins || 0) * factor;
    totals.carbs += (ing.nutritionalValues.carbs || 0) * factor;
    totals.lipids += (ing.nutritionalValues.lipids || 0) * factor;
    totals.fibers += (ing.nutritionalValues.fibers || 0) * factor;
  });
  
  // Arrondir √† 1 d√©cimale
  Object.keys(totals).forEach(key => {
    totals[key] = Math.round(totals[key] * 10) / 10;
  });
  
  return totals;
}

/**
 * G√©n√®re un menu riche en prot√©ines avec l'IA
 */
async function generateProteinMenu(options = {}) {
  const {
    numberOfPeople = 4,
    targetProteins = 30, // grammes de prot√©ines par personne
    mealType = 'd√©jeuner', // d√©jeuner, d√Æner, repas complet
    dietaryRestrictions = [] // ['sans lactose', 'sans gluten', etc.]
  } = options;
  
  console.log(`\nü•© G√©n√©ration d'un menu riche en prot√©ines...`);
  console.log(`   üë• ${numberOfPeople} personnes`);
  console.log(`   üéØ Objectif : ${targetProteins}g de prot√©ines par personne`);
  console.log(`   üçΩÔ∏è  Type : ${mealType}`);
  
  // 1. R√©cup√©rer les ingr√©dients riches en prot√©ines
  const highProteinIngredients = getHighProteinIngredients();
  console.log(`\nüìä ${highProteinIngredients.length} ingr√©dients riches en prot√©ines disponibles`);
  console.log(`   Top 5 prot√©ines:`);
  highProteinIngredients.slice(0, 5).forEach(ing => {
    console.log(`   - ${ing.name}: ${ing.proteins}g/100g`);
  });
  
  // 2. Cr√©er le prompt pour l'IA
  const ingredientsList = highProteinIngredients.slice(0, 30).map(ing => 
    `${ing.name} (${ing.proteins}g prot√©ines/100g, cat√©gorie: ${ing.category})`
  ).join('\n');
  
  const restrictionsText = dietaryRestrictions.length > 0 
    ? `RESTRICTIONS: ${dietaryRestrictions.join(', ')}` 
    : '';
  
  const prompt = `Tu es un chef cuisinier professionnel sp√©cialis√© dans les repas riches en prot√©ines pour √©tablissements de sant√© (EHPAD, h√¥pitaux).

MISSION: Compose un ${mealType} CLASSIQUE et √âQUILIBR√â pour ${numberOfPeople} personnes avec un minimum de ${targetProteins}g de prot√©ines par personne.

${restrictionsText}

INGR√âDIENTS RICHES EN PROT√âINES DISPONIBLES:
${ingredientsList}

Tu peux aussi utiliser des l√©gumes, f√©culents et condiments pour compl√©ter le menu.

R√àGLES STRICTES:
1. UTILISE UN NOM DE PLAT CLASSIQUE ET SIMPLE (ex: "Poulet r√¥ti aux l√©gumes", "Saumon grill√© et riz", "B≈ìuf bourguignon")
2. √âVITE les noms po√©tiques, m√©taphores ou descriptions trop cr√©atives
3. CHOISIS DES ASSOCIATIONS D'INGR√âDIENTS TRADITIONNELLES ET LOGIQUES
   ‚ùå PAS de combinaisons bizarres (ex: thon + cacahu√®tes)
   ‚úÖ Associations classiques (poulet + riz, saumon + l√©gumes, b≈ìuf + pommes de terre)
4. PRIVIL√âGIE UNE SEULE SOURCE DE PROT√âINE PRINCIPALE (viande OU poisson OU ≈ìufs)
5. AJOUTE des prot√©ines v√©g√©tales en accompagnement si n√©cessaire (lentilles, quinoa, pois chiches)
6. Les quantit√©s doivent √™tre R√âALISTES et G√âN√âREUSES pour atteindre l'objectif prot√©ines
7. Le plat doit √™tre APP√âTISSANT et RECONNAISSABLE par tous

EXEMPLES DE NOMS ACCEPTABLES:
- "Poulet grill√©, riz et haricots verts"
- "Pav√© de saumon, pur√©e de pommes de terre"
- "B≈ìuf brais√© aux carottes et lentilles"
- "Blanquette de veau et riz basmati"
- "Filet de colin sauce citron, √©pinards"

FORMAT DE R√âPONSE (JSON):
{
  "nomMenu": "Nom simple et classique du plat",
  "description": "Description courte et r√©aliste (1 ligne)",
  "ingredients": [
    {
      "nom": "nom exact de l'ingr√©dient",
      "quantite": 600,
      "unite": "g"
    }
  ],
  "instructions": [
    "√âtape 1 - action claire",
    "√âtape 2 - action claire"
  ],
  "tempsCuisson": "30 min",
  "difficulte": "Facile"
}

IMPORTANT: R√©ponds UNIQUEMENT avec le JSON valide, sans texte avant ou apr√®s, sans markdown.`;

  console.log(`\nü§ñ Appel √† l'IA OpenAI...`);
  
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "Tu es un chef nutritionniste expert. Tu r√©ponds UNIQUEMENT en JSON valide, sans texte additionnel."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.8,
      max_tokens: 2000
    });
    
    const response = completion.choices[0].message.content.trim();
    console.log(`\n‚úÖ R√©ponse IA re√ßue`);
    
    // Parser le JSON
    let menuData;
    try {
      // Nettoyer la r√©ponse (enlever les markdown code blocks si pr√©sents)
      const cleanResponse = response.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      menuData = JSON.parse(cleanResponse);
    } catch (parseError) {
      console.error('‚ùå Erreur parsing JSON:', parseError);
      console.log('R√©ponse brute:', response);
      throw new Error('Format de r√©ponse invalide');
    }
    
    // 3. Enrichir avec les vraies valeurs nutritionnelles de la database
    console.log(`\nüìä Calcul des valeurs nutritionnelles r√©elles...`);
    
    const enrichedIngredients = menuData.ingredients.map(ing => {
      const ingredientData = getIngredientData(ing.nom);
      
      if (ingredientData) {
        return {
          ...ing,
          category: ingredientData.category,
          nutritionalValues: ingredientData.nutritionalValues
        };
      } else {
        console.warn(`‚ö†Ô∏è  Ingr√©dient "${ing.nom}" non trouv√© dans la database`);
        return {
          ...ing,
          category: 'autres',
          nutritionalValues: {
            calories: 0,
            proteins: 0,
            carbs: 0,
            lipids: 0,
            fibers: 0
          }
        };
      }
    });
    
    const nutritionTotals = calculateMenuNutrition(enrichedIngredients);
    const nutritionPerPerson = {
      calories: Math.round(nutritionTotals.calories / numberOfPeople * 10) / 10,
      proteins: Math.round(nutritionTotals.proteins / numberOfPeople * 10) / 10,
      carbs: Math.round(nutritionTotals.carbs / numberOfPeople * 10) / 10,
      lipids: Math.round(nutritionTotals.lipids / numberOfPeople * 10) / 10,
      fibers: Math.round(nutritionTotals.fibers / numberOfPeople * 10) / 10
    };
    
    // 4. Afficher le r√©sultat final
    console.log(`\n${'='.repeat(60)}`);
    console.log(`üçΩÔ∏è  ${menuData.nomMenu.toUpperCase()}`);
    console.log(`${'='.repeat(60)}`);
    console.log(`\nüìù ${menuData.description}`);
    console.log(`\nüë• Pour ${numberOfPeople} personnes`);
    console.log(`‚è±Ô∏è  Temps de cuisson : ${menuData.tempsCuisson}`);
    console.log(`üìä Difficult√© : ${menuData.difficulte}`);
    
    console.log(`\nü•ò INGR√âDIENTS:`);
    enrichedIngredients.forEach(ing => {
      const proteinInfo = ing.nutritionalValues.proteins 
        ? ` (${Math.round(ing.nutritionalValues.proteins * ing.quantite / 100)}g prot√©ines)` 
        : '';
      console.log(`   ‚Ä¢ ${ing.nom}: ${ing.quantite}${ing.unite}${proteinInfo}`);
    });
    
    console.log(`\nüë®‚Äçüç≥ INSTRUCTIONS:`);
    menuData.instructions.forEach((step, index) => {
      console.log(`   ${index + 1}. ${step}`);
    });
    
    console.log(`\nüìä VALEURS NUTRITIONNELLES TOTALES (${numberOfPeople} pers.):`);
    console.log(`   ‚Ä¢ Calories : ${nutritionTotals.calories} kcal`);
    console.log(`   ‚Ä¢ Prot√©ines : ${nutritionTotals.proteins} g`);
    console.log(`   ‚Ä¢ Glucides : ${nutritionTotals.carbs} g`);
    console.log(`   ‚Ä¢ Lipides : ${nutritionTotals.lipids} g`);
    console.log(`   ‚Ä¢ Fibres : ${nutritionTotals.fibers} g`);
    
    console.log(`\nüìä VALEURS NUTRITIONNELLES PAR PERSONNE:`);
    console.log(`   ‚Ä¢ Calories : ${nutritionPerPerson.calories} kcal`);
    console.log(`   ‚Ä¢ Prot√©ines : ${nutritionPerPerson.proteins} g ${nutritionPerPerson.proteins >= targetProteins ? '‚úÖ' : '‚ö†Ô∏è'}`);
    console.log(`   ‚Ä¢ Glucides : ${nutritionPerPerson.carbs} g`);
    console.log(`   ‚Ä¢ Lipides : ${nutritionPerPerson.lipids} g`);
    console.log(`   ‚Ä¢ Fibres : ${nutritionPerPerson.fibers} g`);
    
    console.log(`\n${'='.repeat(60)}`);
    
    if (nutritionPerPerson.proteins >= targetProteins) {
      console.log(`‚úÖ Objectif prot√©ines atteint ! (${nutritionPerPerson.proteins}g / ${targetProteins}g)`);
    } else {
      console.log(`‚ö†Ô∏è  Objectif prot√©ines non atteint (${nutritionPerPerson.proteins}g / ${targetProteins}g)`);
    }
    
    // Retourner l'objet complet
    return {
      menu: {
        ...menuData,
        ingredients: enrichedIngredients
      },
      nutrition: {
        total: nutritionTotals,
        perPerson: nutritionPerPerson
      },
      numberOfPeople
    };
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration du menu:', error);
    throw error;
  }
}

// ========== EXEMPLES D'UTILISATION ==========

// Exemple 1: Menu d√©jeuner riche en prot√©ines (standard)
async function exemple1() {
  console.log('\nüîπ EXEMPLE 1: Menu d√©jeuner standard riche en prot√©ines\n');
  await generateProteinMenu({
    numberOfPeople: 4,
    targetProteins: 35,
    mealType: 'd√©jeuner'
  });
}

// Exemple 2: Menu d√Æner pour sportifs (tr√®s riche en prot√©ines)
async function exemple2() {
  console.log('\nüîπ EXEMPLE 2: Menu d√Æner pour sportifs\n');
  await generateProteinMenu({
    numberOfPeople: 2,
    targetProteins: 50,
    mealType: 'd√Æner'
  });
}

// Exemple 3: Menu avec restrictions alimentaires
async function exemple3() {
  console.log('\nüîπ EXEMPLE 3: Menu sans lactose\n');
  await generateProteinMenu({
    numberOfPeople: 4,
    targetProteins: 30,
    mealType: 'd√©jeuner',
    dietaryRestrictions: ['sans lactose']
  });
}

// ========== LANCEMENT ==========

async function main() {
  try {
    // Choisir l'exemple √† ex√©cuter (d√©commenter celui souhait√©)
    await exemple1();
    // await exemple2();
    // await exemple3();
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    process.exit(1);
  }
}

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

// Exporter pour utilisation dans d'autres fichiers
export { generateProteinMenu, getHighProteinIngredients, calculateMenuNutrition };

