import asyncHandler from 'express-async-handler';
import Order from '../models/Order.js';
import Product from '../models/Product.js';
import Stock from '../models/Stock.js';
import User from '../models/User.js';
import notificationService from '../services/notificationService.js';

// @desc    Cr√©er une nouvelle commande
// @route   POST /api/orders
// @access  Private (collectivite)
export const createOrder = asyncHandler(async (req, res) => {
  console.log('üì¶ CREATE ORDER - Donn√©es re√ßues:', JSON.stringify(req.body, null, 2));
  console.log('üì¶ CREATE ORDER - User:', req.user);
  
  const { supplier, items, deliveryDate, notes } = req.body;

  if (!supplier || !items || !Array.isArray(items) || items.length === 0) {
    console.log('‚ùå CREATE ORDER - Validation √©chou√©e:', { supplier, items });
    res.status(400);
    throw new Error('Fournisseur et articles requis');
  }

  // D√©terminer si supplier est un ID ou un nom
  let supplierId;
  
  // V√©rifier si c'est un ID MongoDB valide (24 caract√®res hexad√©cimaux)
  const isObjectId = /^[0-9a-fA-F]{24}$/.test(supplier);
  
  if (isObjectId) {
    // C'est d√©j√† un ID, v√©rifier qu'il existe
    const supplierUser = await User.findById(supplier);
    if (!supplierUser) {
      res.status(400);
      throw new Error(`Fournisseur non trouv√©: ${supplier}`);
    }
    supplierId = supplierUser._id;
    console.log(`‚úÖ Fournisseur trouv√© par ID: ${supplierUser.businessName || supplierUser.name}`);
  } else {
    // C'est un nom, chercher par businessName
    const supplierUser = await User.findOne({ businessName: supplier });
    if (!supplierUser) {
      res.status(400);
      throw new Error(`Fournisseur non trouv√©: ${supplier}`);
    }
    supplierId = supplierUser._id;
    console.log(`‚úÖ Fournisseur trouv√© par nom: ${supplier}`);
  }

  // V√©rifier que tous les produits existent et calculer les prix
  const orderItems = [];
  let subtotal = 0;
  const stockWarnings = []; // Pour stocker les alertes de stock bas

  for (const item of items) {
    console.log(`\nüîç Traitement item:`, {
      productId: item.productId,
      quantity: item.quantity
    });
    
    const product = await Product.findById(item.productId);
    if (!product) {
      console.error(`‚ùå Produit non trouv√©: ${item.productId}`);
      res.status(400);
      throw new Error(`Produit non trouv√©: ${item.productId}`);
    }

    console.log(`üì¶ Produit trouv√©: ${product.name}`);
    console.log(`   Prix: ${product.price}‚Ç¨/${product.unit}`);
    console.log(`   Stock: ${product.stock} ${product.unit}`);

    // üéØ V√âRIFIER LE STOCK DISPONIBLE CHEZ LE FOURNISSEUR
    if (product.stock < item.quantity) {
      console.error(`‚ùå Stock insuffisant pour ${product.name}`);
      res.status(400);
      throw new Error(`Stock insuffisant pour ${product.name}. Disponible: ${product.stock} ${product.unit}, Demand√©: ${item.quantity} ${product.unit}`);
    }

    const totalPrice = product.price * item.quantity;
    subtotal += totalPrice;

    console.log(`üí∞ Prix unitaire: ${product.price}‚Ç¨, Quantit√©: ${item.quantity}, Total: ${totalPrice.toFixed(2)}‚Ç¨`);

    orderItems.push({
      product: product._id,
      productName: product.name,
      quantity: item.quantity,
      unit: product.unit,
      unitPrice: product.price,
      totalPrice: totalPrice
    });
  }

  console.log(`üì¶ Cr√©ation de commande - ${orderItems.length} produit(s) - Total: ${subtotal.toFixed(2)}‚Ç¨`);

  // G√©n√©rer le num√©ro de commande
  const count = await Order.countDocuments();
  const orderNumber = `CMD-${Date.now()}-${(count + 1).toString().padStart(4, '0')}`;

  const order = new Order({
    orderNumber: orderNumber,
    customer: req.user._id,
    supplier: supplierId,
    items: orderItems,
    delivery: {
      requestedDate: new Date(deliveryDate),
      notes: notes || ''
    },
    pricing: {
      subtotal: subtotal,
      tax: 0, // Pas de TVA pour les collectivit√©s
      total: subtotal
    },
    notes: {
      customer: notes || ''
    },
    establishmentType: req.user.establishmentType || 'restaurant'
  });

  await order.save();
  console.log(`‚úÖ Commande ${orderNumber} cr√©√©e avec succ√®s`);
  
  // üîî NOTIFIER LE FOURNISSEUR DE LA NOUVELLE COMMANDE
  try {
    await order.populate('customer', 'businessName name');
    notificationService.notifyNewOrder(supplierId, order);
    console.log(`üì¨ Notification envoy√©e au fournisseur ${supplierId}`);
  } catch (notifError) {
    console.error('‚ùå Erreur lors de l\'envoi de la notification:', notifError);
    // Ne pas bloquer la cr√©ation de commande si la notification √©choue
  }

  // üéØ D√âDUIRE LE STOCK DU FOURNISSEUR
  console.log(`üìâ D√©duction du stock fournisseur pour ${orderItems.length} produit(s)...`);
  const lowStockAlerts = [];
  
  for (const item of items) {
    try {
      const product = await Product.findById(item.productId);
      if (product) {
        await product.decreaseStock(item.quantity);
        
        // V√©rifier si le stock est bas apr√®s la d√©duction
        if (product.isLowStock()) {
          lowStockAlerts.push({
            productName: product.name,
            currentStock: product.stock,
            stockAlert: product.stockAlert
          });
          console.log(`‚ö†Ô∏è ALERTE STOCK BAS: ${product.name} - Restant: ${product.stock} ${product.unit}`);
        }
      }
    } catch (error) {
      console.error(`‚ùå Erreur lors de la d√©duction du stock pour ${item.productId}:`, error);
      // Ne pas bloquer la commande si la d√©duction √©choue (d√©j√† cr√©√©e)
    }
  }
  
  // Ajouter les alertes de stock bas √† la r√©ponse
  const response = {
    success: true,
    data: order
  };
  
  if (lowStockAlerts.length > 0) {
    response.lowStockAlerts = lowStockAlerts;
    response.message = `Commande cr√©√©e. Attention: ${lowStockAlerts.length} produit(s) en stock bas`;
  }
  
  console.log('‚úÖ CREATE ORDER - Commande cr√©√©e avec succ√®s:', orderNumber);
  res.status(201).json(response);
});

// @desc    R√©cup√©rer les commandes du client connect√©
// @route   GET /api/orders
// @access  Private
export const getCustomerOrders = asyncHandler(async (req, res) => {
  const orders = await Order.find({ customer: req.user._id })
    .populate('supplier', 'name businessName email phone')
    .populate('items.product', 'name category')
    .sort({ createdAt: -1 });

  res.json({ success: true, count: orders.length, data: orders });
});

// @desc    R√©cup√©rer les commandes re√ßues par le fournisseur
// @route   GET /api/orders/supplier
// @access  Private (fournisseur)
export const getSupplierOrders = asyncHandler(async (req, res) => {
  const orders = await Order.find({ supplier: req.user._id })
    .populate('customer', 'name businessName email phone')
    .populate('items.product', 'name category')
    .sort({ createdAt: -1 });

  res.json({ success: true, count: orders.length, data: orders });
});

// @desc    R√©cup√©rer une commande par ID
// @route   GET /api/orders/:id
// @access  Private
export const getOrder = asyncHandler(async (req, res) => {
  const order = await Order.findById(req.params.id)
    .populate('customer', 'name businessName email phone')
    .populate('supplier', 'name businessName email phone')
    .populate('items.product', 'name category description');

  if (!order) {
    res.status(404);
    throw new Error('Commande non trouv√©e');
  }

  // V√©rifier que l'utilisateur a le droit de voir cette commande
  if (order.customer._id.toString() !== req.user._id.toString() && 
      order.supplier._id.toString() !== req.user._id.toString()) {
    res.status(403);
    throw new Error('Non autoris√© √† voir cette commande');
  }

  res.json({ success: true, data: order });
});

// @desc    Mettre √† jour le statut d'une commande (par le fournisseur)
// @route   PUT /api/orders/:id/status
// @access  Private (fournisseur)
export const updateOrderStatus = asyncHandler(async (req, res) => {
  const { status } = req.body;
  const validStatuses = ['pending', 'confirmed', 'preparing', 'prepared', 'ready', 'shipped', 'cancelled'];

  if (!validStatuses.includes(status)) {
    res.status(400);
    throw new Error('Statut invalide');
  }

  // Charger la commande avec les donn√©es populate AVANT de modifier
  const order = await Order.findById(req.params.id)
    .populate('customer', 'businessName name email')
    .populate('supplier', 'businessName name email');

  if (!order) {
    res.status(404);
    throw new Error('Commande non trouv√©e');
  }

  // V√©rifier que l'utilisateur est le fournisseur de cette commande
  if (order.supplier._id.toString() !== req.user._id.toString()) {
    res.status(403);
    throw new Error('Non autoris√© √† modifier cette commande');
  }

  const oldStatus = order.status;
  console.log(`üîÑ Changement de statut: ${oldStatus} ‚Üí ${status} pour commande ${order.orderNumber}`);
  
  await order.updateStatus(status);
  
  // üîî NOTIFIER LE CLIENT DU CHANGEMENT DE STATUT
  try {
    const customerId = order.customer._id || order.customer;
    console.log(`\nüì¨ ======== ENVOI NOTIFICATION CLIENT ========`);
    console.log(`   Customer ID: ${customerId}`);
    console.log(`   Customer type: ${typeof customerId}`);
    console.log(`   Customer toString: ${customerId.toString()}`);
    console.log(`   Supplier: ${order.supplier?.businessName || 'N/A'}`);
    console.log(`   Customer: ${order.customer?.businessName || 'N/A'}`);
    console.log(`   Order: ${order.orderNumber}`);
    console.log(`   Status: ${oldStatus} ‚Üí ${status}`);
    
    notificationService.notifyOrderStatusChange(customerId, order, oldStatus, status);
    console.log(`‚úÖ Notification envoy√©e au service`);
    console.log(`========================================\n`);
  } catch (notifError) {
    console.error('‚ùå Erreur lors de l\'envoi de la notification:', notifError);
    console.error('   Stack:', notifError.stack);
  }

  res.json({ success: true, data: order });
});

// @desc    Mettre √† jour le statut d'une commande (par le client)
// @route   PUT /api/orders/:id/customer-status
// @access  Private (collectivite, restaurant, resto)
export const updateCustomerOrderStatus = asyncHandler(async (req, res) => {
  console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë  üéØ updateCustomerOrderStatus - D√âBUT               ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
  
  const { status, notes } = req.body;
  const validStatuses = ['delivered', 'issue'];

  console.log(`üìã Donn√©es re√ßues:`);
  console.log(`   ‚Ä¢ Order ID: ${req.params.id}`);
  console.log(`   ‚Ä¢ Status demand√©: ${status}`);
  console.log(`   ‚Ä¢ User ID: ${req.user._id}`);
  console.log(`   ‚Ä¢ Notes: ${notes || 'Aucune'}`);

  if (!validStatuses.includes(status)) {
    res.status(400);
    throw new Error('Statut invalide. Utilisez "delivered" pour confirmer la r√©ception ou "issue" pour signaler un probl√®me');
  }

  const order = await Order.findById(req.params.id).populate('supplier', 'businessName name');

  if (!order) {
    res.status(404);
    throw new Error('Commande non trouv√©e');
  }

  console.log(`‚úÖ Commande trouv√©e: ${order.orderNumber}`);
  console.log(`   ‚Ä¢ Status actuel: ${order.status}`);
  console.log(`   ‚Ä¢ Client: ${order.customer}`);
  console.log(`   ‚Ä¢ Nombre d'articles: ${order.items.length}`);

  // V√©rifier que l'utilisateur est le client de cette commande
  if (order.customer.toString() !== req.user._id.toString()) {
    console.log(`‚ùå Erreur d'autorisation: ${order.customer} !== ${req.user._id}`);
    res.status(403);
    throw new Error('Non autoris√© √† modifier cette commande');
  }

  console.log(`‚úÖ Autorisation OK`);

  // V√©rifier que la commande a bien √©t√© confirm√©e/pr√©par√©e avant de confirmer la r√©ception
  const validStatusForDelivery = ['confirmed', 'preparing', 'prepared', 'ready', 'shipped'];
  if (status === 'delivered' && !validStatusForDelivery.includes(order.status)) {
    console.log(`‚ùå Status invalide pour confirmation: ${order.status} (doit √™tre l'un de: ${validStatusForDelivery.join(', ')})`);
    res.status(400);
    throw new Error('La commande doit d\'abord √™tre confirm√©e et pr√©par√©e par le fournisseur');
  }

  console.log(`üìù Mise √† jour du status vers: ${status}`);
  await order.updateStatus(status);
  console.log(`‚úÖ Status mis √† jour avec succ√®s`);
  
  // Ajouter les notes du client si fourni (pour signaler un probl√®me)
  if (notes) {
    order.notes.customer = notes;
    await order.save();
  }
  
  // üîî NOTIFIER LE FOURNISSEUR SI UN PROBL√àME EST SIGNAL√â
  if (status === 'issue') {
    try {
      notificationService.notifyOrderIssue(order.supplier._id, order);
      console.log(`üì¨ Notification de probl√®me envoy√©e au fournisseur ${order.supplier._id}`);
    } catch (notifError) {
      console.error('‚ùå Erreur lors de l\'envoi de la notification:', notifError);
    }
  }

  // üéØ AJOUT AUTOMATIQUE AU STOCK quand la commande est confirm√©e
  if (status === 'delivered') {
    console.log(`\nüîÑ Status est 'delivered' ‚Üí Ajout au stock activ√©`);
    try {
      console.log(`\nüì¶ ========== AJOUT AUTOMATIQUE AU STOCK ==========`);
      console.log(`üì¶ Commande: ${order.orderNumber}`);
      console.log(`üì¶ Client ID: ${req.user._id}`);
      console.log(`üì¶ Nombre d'articles dans la commande: ${order.items.length}`);
      
      console.log(`\nüìã Articles √† ajouter:`);
      order.items.forEach((item, index) => {
        console.log(`   ${index + 1}. ${item.productName} - ${item.quantity} ${item.unit} @ ${item.unitPrice}‚Ç¨`);
      });
      
      // Trouver ou cr√©er le stock du client
      let stock = await Stock.findOne({ createdBy: req.user._id });
      
      if (!stock) {
        // Cr√©er un nouveau stock pour ce client
        stock = new Stock({
          createdBy: req.user._id,
          establishmentType: req.user.establishmentType || 'autre',
          items: []
        });
        console.log(`‚ú® Cr√©ation d'un nouveau stock pour l'utilisateur ${req.user._id}`);
      } else {
        console.log(`üì¶ Stock existant trouv√© avec ${stock.items.length} article(s)`);
      }
      
      const supplierName = order.supplier?.businessName || order.supplier?.name || 'Fournisseur inconnu';
      
      // Parcourir tous les articles de la commande
      for (const orderItem of order.items) {
        const itemName = orderItem.productName;
        const itemQuantity = orderItem.quantity;
        const itemUnit = orderItem.unit;
        const itemPrice = orderItem.unitPrice;
        
        // Chercher si l'article existe d√©j√† dans le stock (par nom ET unit√©)
        // On consolide tous les articles avec le m√™me nom et la m√™me unit√©, peu importe le fournisseur
        const existingItemIndex = stock.items.findIndex(
          item => item.name.toLowerCase() === itemName.toLowerCase() && 
                  item.unit === itemUnit
        );
        
        if (existingItemIndex !== -1) {
          // L'article existe d√©j√† : augmenter la quantit√©
          const oldQuantity = stock.items[existingItemIndex].quantity;
          stock.items[existingItemIndex].quantity += itemQuantity;
          stock.items[existingItemIndex].price = itemPrice; // Mettre √† jour le prix
          stock.items[existingItemIndex].purchaseDate = new Date(); // Mettre √† jour la date
          // Mettre √† jour le fournisseur avec le plus r√©cent (ou combiner s'ils sont diff√©rents)
          if (stock.items[existingItemIndex].supplier !== supplierName && !stock.items[existingItemIndex].supplier.includes(supplierName)) {
            stock.items[existingItemIndex].supplier = `${stock.items[existingItemIndex].supplier}, ${supplierName}`;
          }
          console.log(`   ‚ûï ${itemName}: ${oldQuantity} ‚Üí ${stock.items[existingItemIndex].quantity} ${itemUnit} (consolid√©)`);
        } else {
          // Nouvel article : l'ajouter au stock
          const categoryMap = {
            'l√©gumes': 'legumes',
            'viande': 'viandes',
            'poisson': 'poissons',
            'lait': 'produits-laitiers',
            'c√©r√©ales': 'cereales',
            '√©pices': 'epices',
            'boisson': 'boissons',
            'fruit': 'fruits'
          };
          
          // D√©terminer la cat√©gorie (basique, peut √™tre am√©lior√©)
          let category = 'autres';
          const lowerName = itemName.toLowerCase();
          for (const [keyword, cat] of Object.entries(categoryMap)) {
            if (lowerName.includes(keyword)) {
              category = cat;
              break;
            }
          }
          
          stock.items.push({
            name: itemName,
            category: category,
            quantity: itemQuantity,
            unit: itemUnit,
            price: itemPrice,
            supplier: supplierName,
            purchaseDate: new Date(),
            status: 'available',
            notes: `Ajout√© automatiquement depuis la commande ${order.orderNumber}`
          });
          console.log(`   ‚ú® Nouvel article ajout√©: ${itemName} (${itemQuantity} ${itemUnit})`);
        }
      }
      
      // Sauvegarder le stock mis √† jour
      console.log(`\nüíæ Tentative de sauvegarde du stock...`);
      console.log(`üíæ Nombre d'articles √† sauvegarder: ${stock.items.length}`);
      console.log(`üíæ Est nouveau stock: ${stock.isNew ? 'OUI' : 'NON'}`);
      
      const savedStock = await stock.save();
      
      console.log(`\n‚úÖ ========== SUCC√àS ! STOCK SAUVEGARD√â ==========`);
      console.log(`‚úÖ ID du stock: ${savedStock._id}`);
      console.log(`‚úÖ Nombre total d'articles: ${savedStock.items.length}`);
      console.log(`‚úÖ Articles dans le stock apr√®s sauvegarde:`);
      savedStock.items.slice(-5).forEach((item, index) => {
        console.log(`   ${savedStock.items.length - 4 + index}. ${item.name} - ${item.quantity} ${item.unit}`);
      });
      console.log(`üì¶ ========== FIN AJOUT AU STOCK ==========\n`);
      
    } catch (stockError) {
      console.error('\n‚ùå ========== ERREUR LORS DE L\'AJOUT AU STOCK ==========');
      console.error('‚ùå Type d\'erreur:', stockError.constructor.name);
      console.error('‚ùå Message:', stockError.message);
      console.error('‚ùå Stack:', stockError.stack);
      
      if (stockError.errors) {
        console.error('‚ùå Erreurs de validation:');
        Object.keys(stockError.errors).forEach(key => {
          console.error(`   ‚Ä¢ ${key}: ${stockError.errors[key].message}`);
        });
      }
      
      console.error('‚ùå ========== FIN ERREUR ==========\n');
      // Ne pas bloquer la confirmation de livraison si l'ajout au stock √©choue
      // L'utilisateur pourra ajouter manuellement si n√©cessaire
    }
  } else {
    console.log(`\n‚ÑπÔ∏è Status n'est pas 'delivered' (${status}) ‚Üí Pas d'ajout au stock`);
  }

  console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë  ‚úÖ updateCustomerOrderStatus - FIN (SUCCESS)       ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

  res.json({ success: true, data: order });
});

// @desc    Annuler une commande
// @route   PUT /api/orders/:id/cancel
// @access  Private (client ou fournisseur)
export const cancelOrder = asyncHandler(async (req, res) => {
  const order = await Order.findById(req.params.id);

  if (!order) {
    res.status(404);
    throw new Error('Commande non trouv√©e');
  }

  // V√©rifier que l'utilisateur peut annuler cette commande
  const isCustomer = order.customer.toString() === req.user._id.toString();
  const isSupplier = order.supplier.toString() === req.user._id.toString();

  if (!isCustomer && !isSupplier) {
    res.status(403);
    throw new Error('Non autoris√© √† annuler cette commande');
  }

  // Ne pas permettre l'annulation si la commande est d√©j√† livr√©e
  if (order.status === 'delivered') {
    res.status(400);
    throw new Error('Impossible d\'annuler une commande d√©j√† livr√©e');
  }

  await order.updateStatus('cancelled');
  console.log(`‚ùå Commande ${order.orderNumber} annul√©e`);

  // üéØ REMETTRE LE STOCK AU FOURNISSEUR si la commande est annul√©e
  if (order.status === 'cancelled') {
    console.log(`üìà Remise du stock fournisseur pour ${order.items.length} produit(s)...`);
    
    for (const item of order.items) {
      try {
        const product = await Product.findById(item.product);
        if (product) {
          await product.increaseStock(item.quantity);
          console.log(`   ‚Ü©Ô∏è ${item.productName}: +${item.quantity} ${item.unit} remis en stock`);
        }
      } catch (error) {
        console.error(`‚ùå Erreur lors de la remise du stock pour ${item.productName}:`, error);
        // Ne pas bloquer l'annulation si la remise en stock √©choue
      }
    }
    
    console.log(`‚úÖ Stock fournisseur restaur√© pour la commande ${order.orderNumber}`);
  }

  res.json({ success: true, data: order });
});
