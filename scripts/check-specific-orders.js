import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Order from '../models/Order.js';

dotenv.config();

const checkSpecificOrders = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB\n');

    // Vos 2 commandes visibles
    const orderNumbers = [
      '#CMD-1761738222986-0054',
      '#CMD-1761737774190-0053'
    ];

    console.log('üîç V√âRIFICATION DES COMMANDES D\'OCTOBRE\n');
    console.log('=' .repeat(80));

    for (const orderNum of orderNumbers) {
      const order = await Order.findOne({ orderNumber: orderNum });
      
      if (!order) {
        console.log(`\n‚ùå Commande ${orderNum} NON TROUV√âE dans la base`);
        continue;
      }

      console.log(`\nüì¶ COMMANDE: ${order.orderNumber}`);
      console.log('   ' + '-'.repeat(76));
      
      console.log(`\n   üè• Site ID: ${order.siteId}`);
      console.log(`   üìä Status: ${order.status}`);
      
      console.log(`\n   üìÖ DATES:`);
      console.log(`      ‚Ä¢ Cr√©√©e le     : ${order.createdAt?.toLocaleString('fr-FR')}`);
      console.log(`      ‚Ä¢ MAJ le       : ${order.updatedAt?.toLocaleString('fr-FR')}`);
      console.log(`      ‚Ä¢ dates.placed : ${order.dates?.placed ? new Date(order.dates.placed).toLocaleString('fr-FR') : '‚ùå NULL'}`);
      console.log(`      ‚Ä¢ dates.delivered : ${order.dates?.delivered ? new Date(order.dates.delivered).toLocaleString('fr-FR') : '‚ùå NULL'}`);
      
      console.log(`\n   üí∞ PRIX:`);
      console.log(`      ‚Ä¢ Subtotal : ${order.pricing?.subtotal || 0}‚Ç¨`);
      console.log(`      ‚Ä¢ Tax      : ${order.pricing?.tax || 0}‚Ç¨`);
      console.log(`      ‚Ä¢ Shipping : ${order.pricing?.shipping || 0}‚Ç¨`);
      console.log(`      ‚Ä¢ TOTAL    : ${order.pricing?.total || 0}‚Ç¨`);
      
      console.log(`\n   üìã ARTICLES: ${order.items?.length || 0} article(s)`);
      if (order.items && order.items.length > 0) {
        order.items.forEach((item, i) => {
          console.log(`      ${i+1}. ${item.productName} - ${item.quantity} x ${item.unitPrice}‚Ç¨ = ${item.totalPrice}‚Ç¨`);
        });
      }
      
      // V√©rification pour Food Cost
      console.log(`\n   üîç VISIBILIT√â:`);
      console.log(`      ‚Ä¢ Dans "Mes Commandes" : ‚úÖ OUI (status="${order.status}")`);
      
      if (order.dates?.delivered) {
        const deliveredDate = new Date(order.dates.delivered);
        const octoberStart = new Date('2025-10-01T00:00:00.000Z');
        const octoberEnd = new Date('2025-10-31T23:59:59.999Z');
        
        if (deliveredDate >= octoberStart && deliveredDate <= octoberEnd) {
          console.log(`      ‚Ä¢ Dans Food Cost octobre : ‚úÖ OUI (delivered="${deliveredDate.toLocaleDateString('fr-FR')}")`);
        } else {
          console.log(`      ‚Ä¢ Dans Food Cost octobre : ‚ùå NON (delivered hors p√©riode)`);
        }
      } else {
        console.log(`      ‚Ä¢ Dans Food Cost octobre : ‚ùå NON (dates.delivered = NULL)`);
        console.log(`\n   ‚ö†Ô∏è  PROBL√àME D√âTECT√â !`);
        console.log(`      Cette commande a status="delivered" MAIS dates.delivered est NULL`);
        console.log(`      ‚Üí Le Food Cost ne peut PAS la trouver`);
        console.log(`      ‚Üí SOLUTION: Corriger via /admin-tools.html`);
      }
    }

    console.log('\n' + '='.repeat(80));
    console.log('\nüìä R√âSUM√â ET DIAGNOSTIC\n');

    // Compter toutes les commandes livr√©es sans date
    const allOrdersWithoutDate = await Order.find({
      status: { $in: ['delivered', 'completed'] },
      'dates.delivered': { $exists: false }
    });

    console.log(`‚ùå Total commandes livr√©es SANS dates.delivered: ${allOrdersWithoutDate.length}`);
    
    if (allOrdersWithoutDate.length > 0) {
      console.log(`\nüí° ACTION REQUISE:`);
      console.log(`   1. Aller sur: https://chefsess.onrender.com/admin-tools.html`);
      console.log(`   2. Cliquer sur: 4Ô∏è‚É£ "Corriger les dates de livraison"`);
      console.log(`   3. Confirmer l'action`);
      console.log(`   4. ${allOrdersWithoutDate.length} commande(s) seront corrig√©e(s)`);
      console.log(`   5. Retourner au Food Cost et cliquer "Recalculer les commandes"`);
      console.log(`   6. ‚úÖ Les montants devraient appara√Ætre !`);
    } else {
      console.log(`\n‚úÖ Toutes les commandes livr√©es ont une date de livraison`);
      console.log(`   Si le Food Cost affiche toujours 0‚Ç¨, v√©rifier:`);
      console.log(`   - Que le site ID correspond`);
      console.log(`   - Que la p√©riode est correcte`);
    }

    console.log('\n');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    process.exit(1);
  }
};

checkSpecificOrders();

