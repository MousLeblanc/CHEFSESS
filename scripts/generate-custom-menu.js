// scripts/generate-custom-menu.js
// G√©n√©rateur de menu UNIVERSEL avec crit√®res nutritionnels personnalisables

import dotenv from 'dotenv';
import openai from '../services/openaiClient.js';
import { ingredientsDatabase, getIngredientData } from './ingredients-database.js';

dotenv.config();

/**
 * Filtre les ingr√©dients selon un crit√®re nutritionnel
 * @param {string} nutrientKey - Cl√© du nutriment (proteins, vitaminC, fibers, calcium, iron, etc.)
 * @param {number} minValue - Valeur minimale pour √™tre consid√©r√© "riche"
 * @returns {Array} Liste tri√©e d'ingr√©dients
 */
function getIngredientsByNutrient(nutrientKey, minValue = 0) {
  const ingredients = [];
  
  for (const [name, data] of Object.entries(ingredientsDatabase)) {
    const value = data.nutritionalValues[nutrientKey] || 0;
    if (value >= minValue) {
      ingredients.push({
        name: name,
        category: data.category,
        value: value,
        nutrientKey: nutrientKey,
        nutritionalValues: data.nutritionalValues
      });
    }
  }
  
  return ingredients.sort((a, b) => b.value - a.value);
}

/**
 * G√©n√®re un menu selon des crit√®res nutritionnels personnalis√©s
 * @param {Object} options
 * @param {number} options.numberOfPeople - Nombre de personnes
 * @param {string} options.mealType - Type de repas (d√©jeuner, d√Æner, etc.)
 * @param {Array} options.nutritionalGoals - Liste des objectifs nutritionnels
 *   Ex: [{ nutrient: 'proteins', target: 35, unit: 'g', label: 'Prot√©ines' }]
 * @param {Array} options.dietaryRestrictions - Restrictions alimentaires
 */
export async function generateCustomMenu({
  numberOfPeople = 4,
  mealType = 'd√©jeuner',
  nutritionalGoals = [],
  dietaryRestrictions = [],
  avoidMenuName = null,
  forceVariation = false
}) {
  console.log(`\nüéØ G√©n√©ration d'un menu personnalis√©...`);
  console.log(`   üë• ${numberOfPeople} personnes`);
  console.log(`   üçΩÔ∏è  Type : ${mealType}`);
  if (forceVariation && avoidMenuName) {
    console.log(`   üîÑ Forcer une variation (√©viter: "${avoidMenuName}")`);
  }
  
  if (nutritionalGoals.length === 0) {
    throw new Error('Au moins un objectif nutritionnel doit √™tre sp√©cifi√©');
  }
  
  // Afficher les objectifs
  console.log(`   üéØ Objectifs nutritionnels :`);
  nutritionalGoals.forEach(goal => {
    console.log(`      - ${goal.label} : ${goal.target}${goal.unit} par personne`);
  });
  
  if (dietaryRestrictions.length > 0) {
    console.log(`   ‚ö†Ô∏è  Restrictions : ${dietaryRestrictions.join(', ')}`);
  }
  
  // Construire la liste d'ingr√©dients recommand√©s pour chaque nutriment
  const ingredientLists = {};
  
  nutritionalGoals.forEach(goal => {
    const minValue = goal.minIngredientValue || 5; // Valeur min pour √™tre consid√©r√© "source de"
    const ingredients = getIngredientsByNutrient(goal.nutrient, minValue);
    ingredientLists[goal.nutrient] = ingredients;
    
    console.log(`\nüìä ${ingredients.length} ingr√©dients riches en ${goal.label}`);
    console.log(`   Top 5 :`);
    ingredients.slice(0, 5).forEach(ing => {
      console.log(`   - ${ing.name}: ${ing.value}${goal.unit}/100g`);
    });
  });
  
  // Construire le prompt dynamique
  const goalsText = nutritionalGoals.map(goal => 
    `- ${goal.label} : minimum ${goal.target}${goal.unit} par personne`
  ).join('\n');
  
  const ingredientsSections = nutritionalGoals.map(goal => {
    const list = ingredientLists[goal.nutrient]
      .slice(0, 15)
      .map(i => `${i.name} (${i.value}${goal.unit}/100g)`)
      .join('\n');
    
    return `INGR√âDIENTS RICHES EN ${goal.label.toUpperCase()} DISPONIBLES:\n${list}`;
  }).join('\n\n');
  
  const restrictionsText = dietaryRestrictions.length > 0 
    ? `RESTRICTIONS ALIMENTAIRES: ${dietaryRestrictions.join(', ')}` 
    : '';
  
  const variationText = forceVariation && avoidMenuName
    ? `‚ö†Ô∏è IMPORTANT: Tu as D√âJ√Ä propos√© "${avoidMenuName}".
Tu DOIS cr√©er un menu COMPL√àTEMENT DIFF√âRENT avec:
- Un nom de plat diff√©rent
- Des ingr√©dients principaux diff√©rents (si possible)
- Une pr√©sentation/cuisson diff√©rente
NE R√âP√àTE PAS le menu pr√©c√©dent !`
    : '';
  
  const prompt = `Tu es un chef cuisinier professionnel sp√©cialis√© dans les repas nutritifs pour √©tablissements de sant√© (EHPAD, h√¥pitaux).

MISSION: Compose un ${mealType} CLASSIQUE et √âQUILIBR√â pour ${numberOfPeople} personnes.

OBJECTIFS NUTRITIONNELS PRIORITAIRES:
${goalsText}

${restrictionsText}

${variationText}

${ingredientsSections}

Tu peux aussi utiliser d'autres l√©gumes, f√©culents, viandes, poissons et condiments pour compl√©ter le menu.

R√àGLES STRICTES:
1. UTILISE UN NOM DE PLAT CLASSIQUE ET SIMPLE (ex: "Poulet r√¥ti aux l√©gumes", "Saumon grill√© et riz", "Salade compos√©e")
2. √âVITE les noms po√©tiques, m√©taphores ou descriptions trop cr√©atives
3. CHOISIS DES ASSOCIATIONS D'INGR√âDIENTS TRADITIONNELLES ET LOGIQUES
4. PRIVIL√âGIE des ingr√©dients qui r√©pondent aux objectifs nutritionnels
5. ‚ö†Ô∏è IMPORTANT: Les quantit√©s doivent √™tre PAR PERSONNE (portions individuelles)
   Exemple: Pour du poulet, indique environ 150g (quantit√© par personne)
6. Les quantit√©s doivent √™tre R√âALISTES et G√âN√âREUSES pour atteindre les objectifs nutritionnels
7. Le plat doit √™tre APP√âTISSANT, √âQUILIBR√â et RECONNAISSABLE

EXEMPLES DE NOMS ACCEPTABLES:
- "Poulet grill√© aux poivrons et brocolis"
- "Saumon aux √©pinards et lentilles"
- "B≈ìuf brais√© aux carottes et quinoa"
- "Salade compos√©e aux agrumes"

FORMAT DE R√âPONSE (JSON):
{
  "nomMenu": "Nom simple et classique du plat",
  "description": "Description courte et r√©aliste (1 ligne)",
  "ingredients": [
    {
      "nom": "nom exact de l'ingr√©dient",
      "quantite": 150,
      "unite": "g"
    }
  ],
  "instructions": [
    "√âtape 1 - action claire",
    "√âtape 2 - action claire"
  ],
  "tempsCuisson": "30 min",
  "difficulte": "Facile"
}

‚ö†Ô∏è RAPPEL: Dans "quantite", indique la portion PAR PERSONNE (ex: 150g de poulet par personne).
Le syst√®me multipliera automatiquement par ${numberOfPeople} pour obtenir la quantit√© totale.

IMPORTANT: R√©ponds UNIQUEMENT avec le JSON valide, sans texte avant ou apr√®s, sans markdown.`;

  console.log(`\nü§ñ Appel √† l'IA OpenAI...`);
  
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [{ role: "user", content: prompt }],
      temperature: forceVariation ? 0.9 : 0.7,  // Plus de cr√©ativit√© pour les variations
      max_tokens: 2000,
    });

    const aiResponse = completion.choices[0].message.content;
    console.log(`\n‚úÖ R√©ponse IA re√ßue\n`);
    
    // Parser la r√©ponse
    let menuData;
    try {
      const cleanResponse = aiResponse.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      menuData = JSON.parse(cleanResponse);
    } catch (parseError) {
      console.error('‚ùå Erreur de parsing JSON:', parseError.message);
      console.log('R√©ponse brute:', aiResponse);
      throw parseError;
    }
    
    // Calculer les valeurs nutritionnelles r√©elles
    console.log(`üìä Calcul des valeurs nutritionnelles r√©elles...\n`);
    
    const enrichedIngredients = menuData.ingredients.map(ing => {
      const ingredientData = getIngredientData(ing.nom);
      if (!ingredientData) {
        console.log(`‚ö†Ô∏è  Ingr√©dient "${ing.nom}" non trouv√© dans la database`);
        return null;
      }
      
      // L'IA g√©n√®re les quantit√©s PAR PERSONNE (comme demand√© dans le prompt)
      const quantityPerPerson = parseFloat(ing.quantite) || 100;
      
      console.log(`üîç [BACKEND] Ingr√©dient "${ing.nom}": quantite de l'IA (PAR PERSONNE) = ${ing.quantite}, numberOfPeople = ${numberOfPeople}`);
      
      // Calculer la quantit√© TOTALE en multipliant par le nombre de personnes
      const quantityTotal = quantityPerPerson * numberOfPeople;
      
      console.log(`üîç [BACKEND] ‚Üí quantityPerPerson = ${quantityPerPerson}, quantityTotal = ${quantityTotal}`);
      
      // Calculer les valeurs nutritionnelles pour la quantit√© TOTALE
      const factor = quantityTotal / 100;
      
      const nutritionCalculated = {};
      for (const [key, value] of Object.entries(ingredientData.nutritionalValues)) {
        nutritionCalculated[key] = (value || 0) * factor;
      }
      
      // Construire l'objet final avec SEULEMENT les propri√©t√©s dont on a besoin
      return {
        nom: ing.nom,
        unite: ing.unite,
        quantiteParPersonne: quantityPerPerson,  // Quantit√© par personne (150g)
        quantiteTotal: quantityTotal,             // Quantit√© totale (150 √ó 42 = 6300g)
        nutritionalValues: ingredientData.nutritionalValues,
        calculated: nutritionCalculated
      };
    }).filter(ing => ing !== null);
    
    // Calculer les totaux pour tous les nutriments
    const totals = {};
    enrichedIngredients.forEach(ing => {
      for (const [key, value] of Object.entries(ing.calculated)) {
        totals[key] = (totals[key] || 0) + value;
      }
    });
    
    // Pr√©parer les r√©sultats
    const nutrition = {
      total: totals,
      perPerson: {}
    };
    
    for (const [key, value] of Object.entries(totals)) {
      nutrition.perPerson[key] = value / numberOfPeople;
    }
    
    // Log pour v√©rifier ce qu'on retourne
    console.log('üì§ [BACKEND] Exemple d\'ingr√©dient retourn√©:', JSON.stringify(enrichedIngredients[0], null, 2));
    
    return {
      menu: menuData,
      nutrition: nutrition,
      numberOfPeople: numberOfPeople,
      nutritionalGoals: nutritionalGoals,
      ingredients: enrichedIngredients
    };
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors de l\'appel OpenAI:', error.message);
    throw error;
  }
}

/**
 * Affiche le menu de mani√®re format√©e
 */
export function displayMenu(result) {
  const { menu, nutrition, numberOfPeople, nutritionalGoals, ingredients } = result;
  
  console.log('='.repeat(70));
  console.log(`üçΩÔ∏è  ${menu.nomMenu.toUpperCase()}`);
  console.log('='.repeat(70));
  console.log(`\nüìù ${menu.description}\n`);
  console.log(`üë• Pour ${numberOfPeople} personnes`);
  console.log(`‚è±Ô∏è  Temps de cuisson : ${menu.tempsCuisson}`);
  console.log(`üìä Difficult√© : ${menu.difficulte}`);
  
  console.log(`\nü•ò INGR√âDIENTS:`);
  ingredients.forEach(ing => {
    const nutrientInfo = nutritionalGoals.map(goal => {
      const value = ing.calculated[goal.nutrient] || 0;
      return `${value.toFixed(1)}${goal.unit} ${goal.label.toLowerCase()}`;
    }).join(', ');
    console.log(`   ‚Ä¢ ${ing.nom}: ${ing.quantite}${ing.unite} (${nutrientInfo})`);
  });
  
  console.log(`\nüë®‚Äçüç≥ INSTRUCTIONS:`);
  menu.instructions.forEach((instruction, index) => {
    console.log(`   ${index + 1}. ${instruction}`);
  });
  
  console.log(`\nüìä VALEURS NUTRITIONNELLES TOTALES (${numberOfPeople} pers.):`);
  console.log(`   ‚Ä¢ Calories : ${Math.round(nutrition.total.calories || 0)} kcal`);
  console.log(`   ‚Ä¢ Prot√©ines : ${(nutrition.total.proteins || 0).toFixed(1)} g`);
  console.log(`   ‚Ä¢ Glucides : ${(nutrition.total.carbs || 0).toFixed(1)} g`);
  console.log(`   ‚Ä¢ Lipides : ${(nutrition.total.lipids || 0).toFixed(1)} g`);
  console.log(`   ‚Ä¢ Fibres : ${(nutrition.total.fibers || 0).toFixed(1)} g`);
  
  // Afficher les nutriments des objectifs
  nutritionalGoals.forEach(goal => {
    const value = nutrition.total[goal.nutrient] || 0;
    console.log(`   ‚Ä¢ ${goal.label} : ${value.toFixed(1)} ${goal.unit}`);
  });
  
  console.log(`\nüìä VALEURS NUTRITIONNELLES PAR PERSONNE:`);
  console.log(`   ‚Ä¢ Calories : ${(nutrition.perPerson.calories || 0).toFixed(1)} kcal`);
  console.log(`   ‚Ä¢ Prot√©ines : ${(nutrition.perPerson.proteins || 0).toFixed(1)} g`);
  console.log(`   ‚Ä¢ Glucides : ${(nutrition.perPerson.carbs || 0).toFixed(1)} g`);
  console.log(`   ‚Ä¢ Lipides : ${(nutrition.perPerson.lipids || 0).toFixed(1)} g`);
  console.log(`   ‚Ä¢ Fibres : ${(nutrition.perPerson.fibers || 0).toFixed(1)} g`);
  
  // V√©rifier les objectifs
  let allGoalsMet = true;
  nutritionalGoals.forEach(goal => {
    const value = nutrition.perPerson[goal.nutrient] || 0;
    const met = value >= goal.target;
    const icon = met ? '‚úÖ' : '‚ö†Ô∏è';
    console.log(`   ‚Ä¢ ${goal.label} : ${value.toFixed(1)} ${goal.unit} ${icon}`);
    if (!met) allGoalsMet = false;
  });
  
  console.log('\n' + '='.repeat(70));
  
  if (allGoalsMet) {
    console.log('‚úÖ Tous les objectifs nutritionnels sont atteints !');
  } else {
    console.log('‚ö†Ô∏è  Certains objectifs ne sont pas atteints');
  }
  
  console.log('='.repeat(70) + '\n');
}

