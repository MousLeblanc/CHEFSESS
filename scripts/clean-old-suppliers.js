import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/chaif-ses';

async function cleanOldSuppliers() {
  try {
    console.log('üîå Connexion √† MongoDB:', MONGODB_URI.includes('localhost') ? 'LOCAL' : 'PRODUCTION');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB\n');

    const Supplier = mongoose.model('Supplier', new mongoose.Schema({}, { strict: false }));

    // 1Ô∏è‚É£ Trouver tous les fournisseurs
    const allSuppliers = await Supplier.find({}).sort({ createdAt: -1 });
    console.log(`üì¶ ${allSuppliers.length} fournisseurs trouv√©s au total\n`);

    // 2Ô∏è‚É£ Grouper par nom
    const suppliersByName = {};
    for (const supplier of allSuppliers) {
      if (!suppliersByName[supplier.name]) {
        suppliersByName[supplier.name] = [];
      }
      suppliersByName[supplier.name].push(supplier);
    }

    // 3Ô∏è‚É£ Pour chaque nom, garder le plus r√©cent avec des produits
    let deleted = 0;
    let kept = 0;

    for (const [name, suppliers] of Object.entries(suppliersByName)) {
      console.log(`\nüìã ${name} - ${suppliers.length} occurrence(s)`);

      if (suppliers.length === 1) {
        console.log(`   ‚úÖ Unique - Conserv√© (${suppliers[0].products?.length || 0} produits)`);
        kept++;
        continue;
      }

      // Trier par date (plus r√©cent en premier) et par nombre de produits
      suppliers.sort((a, b) => {
        const productsA = a.products?.length || 0;
        const productsB = b.products?.length || 0;
        
        if (productsA !== productsB) {
          return productsB - productsA; // Plus de produits en premier
        }
        
        return new Date(b.createdAt) - new Date(a.createdAt); // Plus r√©cent en premier
      });

      // Garder le premier (plus r√©cent avec le plus de produits)
      const toKeep = suppliers[0];
      console.log(`   ‚úÖ Conserv√©: ${toKeep._id} (${toKeep.products?.length || 0} produits, cr√©√© le ${toKeep.createdAt})`);
      kept++;

      // Supprimer les autres
      for (let i = 1; i < suppliers.length; i++) {
        const toDelete = suppliers[i];
        await Supplier.findByIdAndDelete(toDelete._id);
        console.log(`   ‚ùå Supprim√©: ${toDelete._id} (${toDelete.products?.length || 0} produits, cr√©√© le ${toDelete.createdAt})`);
        deleted++;
      }
    }

    console.log(`\n\nüéâ Nettoyage termin√© :`);
    console.log(`   ‚úÖ ${kept} fournisseurs conserv√©s`);
    console.log(`   ‚ùå ${deleted} doublons supprim√©s`);

    await mongoose.disconnect();
    process.exit(0);

  } catch (error) {
    console.error('‚ùå Erreur:', error);
    await mongoose.disconnect();
    process.exit(1);
  }
}

cleanOldSuppliers();


