import dotenv from "dotenv";
dotenv.config();

import mongoose from "mongoose";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import RecipeEnriched from "../models/Recipe.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Fichiers JSON √† importer
const recipeFiles = [
  "C:\\Users\\artkl\\Downloads\\recettes_ehpad.json",
  "C:\\Users\\artkl\\Downloads\\recettes_protidiques.json",
  "C:\\Users\\artkl\\Downloads\\recettes_ehpad (1).json",
  "C:\\Users\\artkl\\Downloads\\recettes_protidiques (1).json"
];

async function importRecipes() {
  try {
    // Connexion √† MongoDB
    const mongoUri = process.env.MONGODB_URI || "mongodb://localhost:27017/chef-ses";
    console.log(`üîó Connexion √† MongoDB: ${mongoUri}`);
    
    await mongoose.connect(mongoUri, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 10000,
    });
    
    console.log("‚úÖ Connect√© √† MongoDB");

    let totalImported = 0;
    let totalSkipped = 0;
    let totalErrors = 0;

    // Traiter chaque fichier
    for (const filePath of recipeFiles) {
      console.log(`\nüìÅ Traitement du fichier: ${path.basename(filePath)}`);
      
      // V√©rifier si le fichier existe
      if (!fs.existsSync(filePath)) {
        console.log(`‚ö†Ô∏è  Fichier non trouv√©: ${filePath}`);
        continue;
      }

      // Lire le fichier JSON
      const fileContent = fs.readFileSync(filePath, "utf8");
      const recipes = JSON.parse(fileContent);
      
      console.log(`üìä ${recipes.length} recettes trouv√©es dans le fichier`);

      // Importer chaque recette
      for (const recipe of recipes) {
        try {
          // V√©rifier si la recette existe d√©j√† (par nom)
          const existingRecipe = await RecipeEnriched.findOne({ name: recipe.name });
          
          if (existingRecipe) {
            console.log(`‚è≠Ô∏è  Recette d√©j√† existante: ${recipe.name}`);
            totalSkipped++;
            continue;
          }

          // Normaliser les donn√©es pour s'assurer de la compatibilit√©
          const recipeData = {
            name: recipe.name,
            category: recipe.category,
            establishmentType: recipe.establishmentType || [],
            texture: recipe.texture || "normale",
            diet: recipe.diet || [],
            pathologies: recipe.pathologies || [],
            allergens: recipe.allergens || [],
            nutritionalProfile: recipe.nutritionalProfile || {},
            ingredients: recipe.ingredients || [],
            preparationSteps: recipe.preparationSteps || [],
            compatibleFor: recipe.compatibleFor || [],
            aiCompatibilityScore: recipe.aiCompatibilityScore || 1.0
          };

          // Cr√©er la nouvelle recette
          const newRecipe = new RecipeEnriched(recipeData);
          await newRecipe.save();
          
          console.log(`‚úÖ Import√©e: ${recipe.name}`);
          totalImported++;
          
        } catch (error) {
          console.error(`‚ùå Erreur lors de l'import de "${recipe.name}":`, error.message);
          totalErrors++;
        }
      }
    }

    // Statistiques finales
    console.log("\n" + "=".repeat(60));
    console.log("üìä R√âSUM√â DE L'IMPORT");
    console.log("=".repeat(60));
    console.log(`‚úÖ Recettes import√©es: ${totalImported}`);
    console.log(`‚è≠Ô∏è  Recettes d√©j√† existantes: ${totalSkipped}`);
    console.log(`‚ùå Erreurs: ${totalErrors}`);
    console.log(`üìà Total trait√©: ${totalImported + totalSkipped + totalErrors}`);
    console.log("=".repeat(60));

    // Afficher le nombre total de recettes dans la base
    const totalInDb = await RecipeEnriched.countDocuments();
    console.log(`\nüóÑÔ∏è  Total de recettes dans la base de donn√©es: ${totalInDb}`);

  } catch (error) {
    console.error("‚ùå Erreur g√©n√©rale:", error);
  } finally {
    // Fermer la connexion
    await mongoose.connection.close();
    console.log("\nüîå D√©connexion de MongoDB");
  }
}

// Ex√©cuter l'import
console.log("üöÄ D√©marrage de l'import des recettes...\n");
importRecipes();

