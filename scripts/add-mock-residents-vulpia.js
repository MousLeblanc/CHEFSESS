import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Group from '../models/Group.js';
import Site from '../models/Site.js';
import Resident from '../models/Resident.js';
import User from '../models/User.js';

dotenv.config();

// üë• DONN√âES R√âALISTES POUR G√âN√âRER DES R√âSIDENTS

// Pr√©noms belges courants pour personnes √¢g√©es
const firstNamesMale = [
  'Albert', 'Andr√©', 'Antoine', 'Bernard', 'Charles', 'Claude', 'Daniel', '√âdouard',
  'Fran√ßois', 'Georges', 'Henri', 'Jacques', 'Jean', 'Joseph', 'Louis', 'Marcel',
  'Maurice', 'Michel', 'Paul', 'Pierre', 'Raymond', 'Ren√©', 'Robert', 'Roger',
  'Frans', 'Jan', 'Jozef', 'Karel', 'Luc', 'Marc', 'Patrick', 'Paul', 'Piet', 'Willy'
];

const firstNamesFemale = [
  'Alice', 'Anne', 'Bernadette', 'Catherine', 'Claire', 'Colette', 'Denise', '√âlisabeth',
  '√âmilie', 'Fran√ßoise', 'Georgette', 'H√©l√®ne', 'Jacqueline', 'Jeanne', 'Julienne', 'Louise',
  'Madeleine', 'Marguerite', 'Marie', 'Martine', 'Monique', 'Nicole', 'Odette', 'Simone',
  'Anna', 'Els', 'Frieda', 'Godelieve', 'Hilde', 'Ingrid', 'Katrien', 'Maria', 'Paula', 'Rita'
];

// Noms de famille belges courants
const lastNames = [
  'Dubois', 'Lambert', 'Martin', 'Petit', 'Thomas', 'Robert', 'Richard', 'Durand',
  'Lefebvre', 'Moreau', 'Simon', 'Laurent', 'Michel', 'Garcia', 'David', 'Bertrand',
  'Van den Berg', 'De Vries', 'Janssens', 'Maes', 'Jacobs', 'Mertens', 'Willems', 'Claes',
  'Goossens', 'Wouters', 'De Smet', 'Peeters', 'Hermans', 'Pauwels', 'Desmet', 'Vermeulen'
];

// Allergies courantes chez personnes √¢g√©es
const commonAllergies = [
  { allergen: 'Gluten', severity: 'mod√©r√©e', symptoms: ['Ballonnements', 'Diarrh√©e', 'Fatigue'] },
  { allergen: 'Lactose', severity: 'l√©g√®re', symptoms: ['Ballonnements', 'Inconfort digestif'] },
  { allergen: 'Arachides', severity: 's√©v√®re', symptoms: ['Urticaire', 'Difficult√©s respiratoires'] },
  { allergen: 'Fruits √† coque', severity: 'mod√©r√©e', symptoms: ['D√©mangeaisons', 'Gonflement'] },
  { allergen: '≈íufs', severity: 'l√©g√®re', symptoms: ['√âruptions cutan√©es'] },
  { allergen: 'Poisson', severity: 'mod√©r√©e', symptoms: ['Naus√©es', 'Vomissements'] },
  { allergen: 'Crustac√©s', severity: 's√©v√®re', symptoms: ['Choc anaphylactique possible'] },
  { allergen: 'Soja', severity: 'l√©g√®re', symptoms: ['Troubles digestifs'] },
  { allergen: 'C√©leri', severity: 'l√©g√®re', symptoms: ['Irritations buccales'] },
  { allergen: 'Moutarde', severity: 'l√©g√®re', symptoms: ['R√©actions cutan√©es'] }
];

// Restrictions alimentaires courantes
const dietaryRestrictions = [
  { type: 'm√©dicale', restriction: 'Sans sel', details: 'R√©gime hyposod√© strict' },
  { type: 'm√©dicale', restriction: 'Sans sucre', details: 'Diab√®te de type 2' },
  { type: 'm√©dicale', restriction: 'Faible en graisses', details: 'Hypercholest√©rol√©mie' },
  { type: 'religieuse', restriction: 'Halal', details: 'Pratique musulmane' },
  { type: 'religieuse', restriction: 'Casher', details: 'Pratique juive' },
  { type: '√©thique', restriction: 'V√©g√©tarien', details: 'Choix personnel' },
  { type: 'm√©dicale', restriction: 'Sans gluten', details: 'Maladie c≈ìliaque' },
  { type: 'm√©dicale', restriction: 'Sans lactose', details: 'Intol√©rance au lactose' }
];

// Conditions m√©dicales fr√©quentes en EHPAD
const medicalConditions = [
  { 
    condition: 'Diab√®te type 2', 
    severity: 'mod√©r√©e', 
    impactOnNutrition: 'Contr√¥le strict des glucides',
    dietaryRecommendations: ['Limiter sucres rapides', 'Privil√©gier fibres', 'Portions contr√¥l√©es']
  },
  { 
    condition: 'Hypertension art√©rielle', 
    severity: 'mod√©r√©e', 
    impactOnNutrition: 'R√©duction du sodium',
    dietaryRecommendations: ['R√©gime pauvre en sel', 'Augmenter potassium', '√âviter charcuterie']
  },
  { 
    condition: 'Dysphagie', 
    severity: 's√©v√®re', 
    impactOnNutrition: 'Textures modifi√©es n√©cessaires',
    dietaryRecommendations: ['Texture mix√©e ou hach√©e', '√âpaissir les liquides', '√âviter morceaux']
  },
  { 
    condition: 'Maladie d\'Alzheimer', 
    severity: 'mod√©r√©e', 
    impactOnNutrition: 'Supervision repas n√©cessaire',
    dietaryRecommendations: ['Alimentation assist√©e', 'Environnement calme', 'Plats simples']
  },
  { 
    condition: 'Insuffisance r√©nale', 
    severity: 'mod√©r√©e', 
    impactOnNutrition: 'Contr√¥le prot√©ines et potassium',
    dietaryRecommendations: ['Limiter prot√©ines', 'R√©duire potassium', 'Hydrater mod√©r√©ment']
  },
  { 
    condition: 'D√©nutrition', 
    severity: 'mod√©r√©e', 
    impactOnNutrition: 'Enrichissement calorique',
    dietaryRecommendations: ['Augmenter calories', 'Petits repas fr√©quents', 'Suppl√©ments nutritionnels']
  },
  { 
    condition: 'Ost√©oporose', 
    severity: 'l√©g√®re', 
    impactOnNutrition: 'Apport calcium et vitamine D',
    dietaryRecommendations: ['Produits laitiers', 'Poissons gras', 'Suppl√©mentation vitamine D']
  },
  { 
    condition: 'Reflux gastro-≈ìsophagien', 
    severity: 'l√©g√®re', 
    impactOnNutrition: '√âviter aliments acides',
    dietaryRecommendations: ['Repas l√©gers', '√âviter √©pices', 'Position semi-assise apr√®s repas']
  }
];

// Textures de repas
const textureOptions = [
  { consistency: 'normale', difficulty: 'aucune', probability: 0.60 }, // 60%
  { consistency: 'hach√©e', difficulty: 'l√©g√®re', probability: 0.20 },  // 20%
  { consistency: 'mix√©e', difficulty: 'mod√©r√©e', probability: 0.15 },  // 15%
  { consistency: 'liquide', difficulty: 's√©v√®re', probability: 0.05 }  // 5%
];

// üé≤ FONCTIONS UTILITAIRES

function randomChoice(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function randomBoolean(probability = 0.5) {
  return Math.random() < probability;
}

function getRandomDate(startYear, endYear) {
  const start = new Date(startYear, 0, 1);
  const end = new Date(endYear, 11, 31);
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
}

function generatePhoneNumber() {
  return `+32 ${randomInt(400, 499)} ${randomInt(10, 99)} ${randomInt(10, 99)} ${randomInt(10, 99)}`;
}

function getTextureByProbability() {
  const rand = Math.random();
  let cumulative = 0;
  
  for (const texture of textureOptions) {
    cumulative += texture.probability;
    if (rand <= cumulative) {
      return {
        consistency: texture.consistency,
        difficulty: texture.difficulty,
        notes: texture.consistency !== 'normale' ? `Texture ${texture.consistency} prescrite` : ''
      };
    }
  }
  
  return { consistency: 'normale', difficulty: 'aucune', notes: '' };
}

// üßë‚Äç‚öïÔ∏è G√âN√âRATION D'UN PROFIL NUTRITIONNEL R√âALISTE

function generateNutritionalProfile() {
  const profile = {
    allergies: [],
    intolerances: [],
    dietaryRestrictions: [],
    medicalConditions: [],
    nutritionalNeeds: {},
    texturePreferences: getTextureByProbability(),
    hydration: {
      dailyIntake: randomInt(1200, 2000),
      restrictions: [],
      preferences: ['Eau', 'Th√©', 'Jus de fruits'],
      notes: ''
    },
    foodPreferences: {
      liked: [],
      disliked: [],
      cultural: [],
      religious: [],
      notes: ''
    }
  };

  // Allergies (30% de chance d'avoir 1-2 allergies)
  if (randomBoolean(0.30)) {
    const numAllergies = randomBoolean(0.7) ? 1 : 2;
    for (let i = 0; i < numAllergies; i++) {
      const allergy = randomChoice(commonAllergies);
      profile.allergies.push({
        allergen: allergy.allergen,
        severity: allergy.severity,
        symptoms: allergy.symptoms,
        notes: `Allergie diagnostiqu√©e`
      });
    }
  }

  // Conditions m√©dicales (70% de chance d'avoir 1-3 conditions)
  if (randomBoolean(0.70)) {
    const numConditions = randomBoolean(0.5) ? 1 : randomBoolean(0.7) ? 2 : 3;
    const selectedConditions = [];
    
    for (let i = 0; i < numConditions; i++) {
      let condition;
      do {
        condition = randomChoice(medicalConditions);
      } while (selectedConditions.some(c => c.condition === condition.condition));
      
      selectedConditions.push(condition);
      profile.medicalConditions.push({
        condition: condition.condition,
        severity: condition.severity,
        impactOnNutrition: condition.impactOnNutrition,
        dietaryRecommendations: condition.dietaryRecommendations,
        notes: `Diagnostic confirm√©, suivi m√©dical r√©gulier`
      });
    }
  }

  // Restrictions alimentaires bas√©es sur les conditions m√©dicales
  if (profile.medicalConditions.some(c => c.condition.includes('Diab√®te'))) {
    profile.dietaryRestrictions.push({
      type: 'm√©dicale',
      restriction: 'Sans sucre',
      details: 'Contr√¥le glyc√©mique strict',
      startDate: new Date(Date.now() - 365 * 24 * 60 * 60 * 1000) // Il y a 1 an
    });
  }

  if (profile.medicalConditions.some(c => c.condition.includes('Hypertension'))) {
    profile.dietaryRestrictions.push({
      type: 'm√©dicale',
      restriction: 'Sans sel',
      details: 'R√©gime hyposod√© < 2g/jour',
      startDate: new Date(Date.now() - 730 * 24 * 60 * 60 * 1000) // Il y a 2 ans
    });
  }

  // Restrictions religieuses/√©thiques (10% de chance)
  if (randomBoolean(0.10)) {
    const restriction = randomChoice(dietaryRestrictions.filter(d => 
      d.type === 'religieuse' || d.type === '√©thique'
    ));
    profile.dietaryRestrictions.push({
      type: restriction.type,
      restriction: restriction.restriction,
      details: restriction.details,
      startDate: new Date(Date.now() - 3650 * 24 * 60 * 60 * 1000) // Il y a 10 ans
    });
  }

  // Besoins nutritionnels (bas√©s sur √¢ge et conditions)
  const hasDenutrition = profile.medicalConditions.some(c => c.condition.includes('D√©nutrition'));
  const hasDiabetes = profile.medicalConditions.some(c => c.condition.includes('Diab√®te'));
  
  profile.nutritionalNeeds = {
    calories: {
      daily: hasDenutrition ? randomInt(2000, 2400) : randomInt(1600, 2000),
      perMeal: hasDenutrition ? randomInt(650, 800) : randomInt(500, 650),
      notes: hasDenutrition ? 'Enrichissement calorique n√©cessaire' : ''
    },
    proteins: {
      daily: randomInt(50, 75),
      perMeal: randomInt(20, 30),
      notes: hasDenutrition ? 'Apport prot√©ique renforc√©' : ''
    },
    carbohydrates: {
      daily: hasDiabetes ? randomInt(150, 200) : randomInt(200, 280),
      perMeal: hasDiabetes ? randomInt(50, 65) : randomInt(65, 90),
      notes: hasDiabetes ? 'Privil√©gier glucides complexes' : ''
    },
    fats: {
      daily: randomInt(50, 70),
      perMeal: randomInt(15, 25),
      notes: 'Privil√©gier acides gras insatur√©s'
    },
    fiber: {
      daily: randomInt(20, 30),
      notes: 'Favoriser transit intestinal'
    },
    sodium: {
      daily: profile.dietaryRestrictions.some(r => r.restriction === 'Sans sel') ? 
        randomInt(1000, 1500) : randomInt(2000, 2500),
      restriction: profile.dietaryRestrictions.some(r => r.restriction === 'Sans sel') ? 
        'tr√®s r√©duit' : 'normal',
      notes: profile.dietaryRestrictions.some(r => r.restriction === 'Sans sel') ? 
        'R√©gime hyposod√© strict' : ''
    },
    sugar: {
      daily: hasDiabetes ? randomInt(20, 40) : randomInt(50, 75),
      restriction: hasDiabetes ? 'tr√®s r√©duit' : 'normal',
      notes: hasDiabetes ? 'Contr√¥le glyc√©mique strict' : ''
    }
  };

  // Hydratation (ajuster si dysphagie)
  if (profile.medicalConditions.some(c => c.condition.includes('Dysphagie'))) {
    profile.hydration.restrictions.push('Liquides √©paissis');
    profile.hydration.notes = 'Eau g√©lifi√©e ou √©paissie syst√©matiquement';
  }

  // Pr√©f√©rences alimentaires
  profile.foodPreferences.liked = randomChoice([
    ['Pur√©e de pommes de terre', 'Poulet r√¥ti', 'L√©gumes vapeur'],
    ['P√¢tes', 'Poisson grill√©', 'Salade verte'],
    ['Riz', 'Viande en sauce', 'Carottes'],
    ['Soupe', 'Pain frais', 'Fromage']
  ]);

  profile.foodPreferences.disliked = randomChoice([
    ['Choux', 'Abats'],
    ['Poisson cru', '√âpices fortes'],
    ['Aliments acides', 'Plats trop sal√©s'],
    []
  ]);

  return profile;
}

// üë§ G√âN√âRATION D'UN R√âSIDENT COMPLET

function generateResident(siteId, groupId, createdBy, siteName) {
  const gender = randomChoice(['homme', 'femme', 'homme', 'femme']); // 50/50
  const firstName = gender === 'homme' ? 
    randomChoice(firstNamesMale) : 
    randomChoice(firstNamesFemale);
  const lastName = randomChoice(lastNames);
  
  // √Çge entre 65 et 95 ans (EHPAD)
  const age = randomInt(65, 95);
  const birthYear = new Date().getFullYear() - age;
  const dateOfBirth = getRandomDate(birthYear, birthYear);
  
  return {
    firstName,
    lastName,
    dateOfBirth,
    gender,
    phone: generatePhoneNumber(),
    email: randomBoolean(0.3) ? 
      `${firstName.toLowerCase()}.${lastName.toLowerCase()}@exemple.be` : 
      undefined,
    address: {
      street: `${randomInt(1, 200)} Rue ${randomChoice(['de la Paix', 'du Commerce', 'Principale', 'Neuve'])}`,
      city: siteName,
      postalCode: `${randomInt(1000, 9999)}`,
      country: 'Belgique'
    },
    roomNumber: `${randomInt(1, 3)}${randomInt(0, 9)}${randomInt(1, 9)}`,
    bedNumber: randomChoice(['A', 'B', '']),
    medicalRecordNumber: `VUL-${Date.now()}-${randomInt(1000, 9999)}`,
    nutritionalProfile: generateNutritionalProfile(),
    emergencyContact: {
      name: `${randomChoice(firstNamesMale)} ${randomChoice(lastNames)}`,
      relationship: randomChoice(['Fils', 'Fille', 'Neveu', 'Ni√®ce', 'Ami proche']),
      phone: generatePhoneNumber(),
      email: randomBoolean(0.5) ? `contact${randomInt(1, 999)}@exemple.be` : undefined
    },
    status: 'actif',
    siteId,
    groupId,
    createdBy,
    generalNotes: randomChoice([
      'R√©sident autonome, participe aux activit√©s.',
      'N√©cessite une aide pour les d√©placements.',
      'Pr√©f√®re les repas en compagnie d\'autres r√©sidents.',
      'Aime la lecture et les promenades.',
      ''
    ])
  };
}

// üöÄ SCRIPT PRINCIPAL

async function addMockResidentsVulpia() {
  try {
    // Connexion √† MongoDB
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/chef-ses';
    await mongoose.connect(mongoUri, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('‚úÖ Connect√© √† MongoDB\n');

    // R√©cup√©rer le groupe Vulpia
    const group = await Group.findOne({ code: 'vulpia-group' });
    if (!group) {
      console.error('‚ùå Groupe Vulpia non trouv√©');
      process.exit(1);
    }

    // R√©cup√©rer un utilisateur admin pour createdBy
    const adminUser = await User.findOne({ 
      email: 'admin@vulpiagroup.com' 
    });
    
    if (!adminUser) {
      console.error('‚ùå Admin Vulpia non trouv√©');
      process.exit(1);
    }

    console.log(`üè¢ Groupe: ${group.name}`);
    console.log(`üë§ Admin: ${adminUser.email}\n`);

    // R√©cup√©rer tous les sites du groupe
    const sites = await Site.find({ 
      groupId: group._id 
    }).sort({ siteName: 1 });

    console.log(`üìç ${sites.length} sites trouv√©s\n`);
    console.log('üé≤ G√©n√©ration des r√©sidents mock√©s...\n');

    let totalResidents = 0;
    let totalCreated = 0;
    const stats = {
      withAllergies: 0,
      withDiabetes: 0,
      withHypertension: 0,
      withDysphagia: 0,
      withRestrictions: 0,
      textureNormale: 0,
      textureHachee: 0,
      textureMixee: 0,
      textureLiquide: 0
    };

    for (const site of sites) {
      console.log(`\nüìç Site: ${site.siteName} (${site.isActive ? 'ACTIF' : 'INACTIF'})`);
      
      // Calculer le nombre de r√©sidents √† cr√©er
      // Utiliser la capacit√© ou un nombre par d√©faut
      const capacity = site.settings?.capacity?.lunch || 80;
      // G√©n√©rer entre 70% et 95% de la capacit√©
      const numResidents = Math.floor(capacity * (randomInt(70, 95) / 100));
      
      console.log(`   üë• Capacit√©: ${capacity} ‚Üí G√©n√©ration de ${numResidents} r√©sidents`);
      
      const residentsToCreate = [];
      
      for (let i = 0; i < numResidents; i++) {
        const resident = generateResident(
          site._id, 
          group._id, 
          adminUser._id,
          site.address.city
        );
        residentsToCreate.push(resident);
        
        // Statistiques
        if (resident.nutritionalProfile.allergies.length > 0) stats.withAllergies++;
        if (resident.nutritionalProfile.medicalConditions.some(c => c.condition.includes('Diab√®te'))) stats.withDiabetes++;
        if (resident.nutritionalProfile.medicalConditions.some(c => c.condition.includes('Hypertension'))) stats.withHypertension++;
        if (resident.nutritionalProfile.medicalConditions.some(c => c.condition.includes('Dysphagie'))) stats.withDysphagia++;
        if (resident.nutritionalProfile.dietaryRestrictions.length > 0) stats.withRestrictions++;
        
        const texture = resident.nutritionalProfile.texturePreferences.consistency;
        if (texture === 'normale') stats.textureNormale++;
        else if (texture === 'hach√©e') stats.textureHachee++;
        else if (texture === 'mix√©e') stats.textureMixee++;
        else if (texture === 'liquide') stats.textureLiquide++;
      }
      
      // Ins√©rer tous les r√©sidents du site en une fois
      try {
        const created = await Resident.insertMany(residentsToCreate);
        totalCreated += created.length;
        console.log(`   ‚úÖ ${created.length} r√©sidents cr√©√©s`);
      } catch (error) {
        console.error(`   ‚ùå Erreur pour ${site.siteName}:`, error.message);
      }
      
      totalResidents += numResidents;
    }

    // R√©sum√© final
    console.log('\n' + '='.repeat(70));
    console.log('üéâ G√âN√âRATION TERMIN√âE !');
    console.log('='.repeat(70));
    console.log(`\nüìä STATISTIQUES GLOBALES :`);
    console.log(`   ‚Ä¢ Total r√©sidents g√©n√©r√©s : ${totalResidents}`);
    console.log(`   ‚Ä¢ Total cr√©√©s en base : ${totalCreated}`);
    console.log(`   ‚Ä¢ R√©sidents avec allergies : ${stats.withAllergies} (${Math.round(stats.withAllergies/totalResidents*100)}%)`);
    console.log(`   ‚Ä¢ R√©sidents diab√©tiques : ${stats.withDiabetes} (${Math.round(stats.withDiabetes/totalResidents*100)}%)`);
    console.log(`   ‚Ä¢ R√©sidents hypertendus : ${stats.withHypertension} (${Math.round(stats.withHypertension/totalResidents*100)}%)`);
    console.log(`   ‚Ä¢ R√©sidents avec dysphagie : ${stats.withDysphagia} (${Math.round(stats.withDysphagia/totalResidents*100)}%)`);
    console.log(`   ‚Ä¢ R√©sidents avec restrictions : ${stats.withRestrictions} (${Math.round(stats.withRestrictions/totalResidents*100)}%)`);
    
    console.log(`\nüçΩÔ∏è R√âPARTITION DES TEXTURES :`);
    console.log(`   ‚Ä¢ Texture normale : ${stats.textureNormale} (${Math.round(stats.textureNormale/totalResidents*100)}%)`);
    console.log(`   ‚Ä¢ Texture hach√©e : ${stats.textureHachee} (${Math.round(stats.textureHachee/totalResidents*100)}%)`);
    console.log(`   ‚Ä¢ Texture mix√©e : ${stats.textureMixee} (${Math.round(stats.textureMixee/totalResidents*100)}%)`);
    console.log(`   ‚Ä¢ Texture liquide : ${stats.textureLiquide} (${Math.round(stats.textureLiquide/totalResidents*100)}%)`);

    // V√©rification finale
    const totalInDB = await Resident.countDocuments({ groupId: group._id });
    console.log(`\n‚úÖ V√âRIFICATION BASE DE DONN√âES :`);
    console.log(`   ‚Ä¢ Total r√©sidents en DB : ${totalInDB}`);
    console.log(`   ‚Ä¢ R√©sidents actifs : ${await Resident.countDocuments({ groupId: group._id, status: 'actif' })}`);

    console.log(`\nüí° PROCHAINES √âTAPES :`);
    console.log(`   ‚Ä¢ Connectez-vous en tant qu'admin groupe`);
    console.log(`   ‚Ä¢ Testez la g√©n√©ration de menu IA`);
    console.log(`   ‚Ä¢ Le syst√®me agr√©gera automatiquement tous ces profils`);
    console.log(`   ‚Ä¢ Les restrictions seront prises en compte intelligemment`);

  } catch (error) {
    console.error('\n‚ùå ERREUR CRITIQUE:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\n‚úÖ Connexion MongoDB ferm√©e');
  }
}

// Ex√©cuter le script
addMockResidentsVulpia();

