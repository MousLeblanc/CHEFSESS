import dotenv from 'dotenv';
dotenv.config();

import mongoose from 'mongoose';
import RecipeEnriched from '../models/Recipe.js';

async function testUpdatedSystem() {
  try {
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/chef-ses';
    await mongoose.connect(mongoUri);
    console.log('‚úÖ Connect√© √† MongoDB');

    // Test 1: V√©rifier que le nouveau mod√®le fonctionne
    console.log('\nüîç TEST 1: V√©rification du nouveau mod√®le');
    const recipeCount = await RecipeEnriched.countDocuments();
    console.log(`üìä Nombre de recettes: ${recipeCount}`);

    if (recipeCount > 0) {
      const sampleRecipe = await RecipeEnriched.findOne();
      console.log('üìã Exemple de recette:');
      console.log({
        name: sampleRecipe.name,
        category: sampleRecipe.category,
        texture: sampleRecipe.texture,
        diet: sampleRecipe.diet,
        pathologies: sampleRecipe.pathologies,
        allergens: sampleRecipe.allergens,
        nutritionalProfile: sampleRecipe.nutritionalProfile
      });
    }

    // Test 2: V√©rifier les filtres
    console.log('\nüîç TEST 2: Test des filtres');
    
    // Test filtres de texture
    const textureRecipes = await RecipeEnriched.find({ texture: 'normale' });
    console.log(`üìä Recettes avec texture normale: ${textureRecipes.length}`);

    // Test filtres de r√©gime
    const dietRecipes = await RecipeEnriched.find({ diet: { $in: ['v√©g√©tarien'] } });
    console.log(`üìä Recettes v√©g√©tariennes: ${dietRecipes.length}`);

    // Test filtres de pathologies
    const pathologyRecipes = await RecipeEnriched.find({ pathologies: { $in: ['diab√®te'] } });
    console.log(`üìä Recettes pour diab√©tiques: ${pathologyRecipes.length}`);

    // Test filtres d'allerg√®nes
    const allergenRecipes = await RecipeEnriched.find({ allergens: { $nin: ['gluten'] } });
    console.log(`üìä Recettes sans gluten: ${allergenRecipes.length}`);

    // Test 3: V√©rifier les champs nutritionnels
    console.log('\nüîç TEST 3: V√©rification des champs nutritionnels');
    const recipesWithNutrition = await RecipeEnriched.find({ 
      'nutritionalProfile.kcal': { $gt: 0 } 
    });
    console.log(`üìä Recettes avec donn√©es nutritionnelles: ${recipesWithNutrition.length}`);

    // Test 4: V√©rifier les √©tablissements
    console.log('\nüîç TEST 4: V√©rification des √©tablissements');
    const ehpadRecipes = await RecipeEnriched.find({ 
      establishmentType: { $in: ['ehpad'] } 
    });
    console.log(`üìä Recettes pour EHPAD: ${ehpadRecipes.length}`);

    const collectiviteRecipes = await RecipeEnriched.find({ 
      establishmentType: { $in: ['collectivite'] } 
    });
    console.log(`üìä Recettes pour collectivit√©s: ${collectiviteRecipes.length}`);

    // Test 5: Test de g√©n√©ration de menu simple
    console.log('\nüîç TEST 5: Test de g√©n√©ration de menu simple');
    
    const testFilters = {
      texture: 'normale',
      diet: { $in: ['v√©g√©tarien'] },
      allergens: { $nin: ['gluten'] }
    };

    const compatibleRecipes = await RecipeEnriched.find(testFilters);
    console.log(`üìä Recettes compatibles avec les filtres de test: ${compatibleRecipes.length}`);

    if (compatibleRecipes.length > 0) {
      console.log('üìã Exemples de recettes compatibles:');
      compatibleRecipes.slice(0, 3).forEach(recipe => {
        console.log(`  - ${recipe.name} (${recipe.category})`);
      });
    }

    console.log('\n‚úÖ Tests termin√©s avec succ√®s');

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.connection.close();
  }
}

testUpdatedSystem();
