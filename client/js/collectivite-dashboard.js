// collectivite-dashboard.js
import { logout, getToken, getCurrentUser } from './auth.js';

document.addEventListener('DOMContentLoaded', () => {
    // Protection de la page
    const user = getCurrentUser();
    if (!user || (user.role !== 'collectivite' && user.role !== 'resto' && user.role !== 'admin')) {
        logout();
        return;
    }

    console.log('üöÄ Collectivite Dashboard charg√©');

    // Variables globales
    let groupCounter = 1;
    let stockData = [];
    let suppliersData = [];
    let cart = []; // Panier pour les commandes
    
    // √âl√©ments des onglets
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    
    // √âl√©ments des groupes d'√¢ges
    const addGroupBtn = document.getElementById('add-group-btn');
    
    // √âl√©ments du stock
    const addStockItemBtn = document.getElementById('add-stock-item-btn');
    const refreshStockBtn = document.getElementById('refresh-stock-btn');
    const stockTableBody = document.getElementById('stock-table-body');
    const stockSearch = document.getElementById('stock-search');
    const stockCategoryFilter = document.getElementById('stock-category-filter');
    
    // √âl√©ments des fournisseurs
    const addSupplierBtn = document.getElementById('add-supplier-btn');
    const refreshSuppliersBtn = document.getElementById('refresh-suppliers-btn');
    const suppliersList = document.getElementById('suppliers-list');
    
    // Gestion des onglets
    function initTabs() {
        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const targetTab = button.getAttribute('data-tab');
                
                // Retirer la classe active de tous les boutons et contenus
                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabContents.forEach(content => content.classList.remove('active'));
                
                // Ajouter la classe active au bouton cliqu√© et au contenu correspondant
                button.classList.add('active');
                document.getElementById(`${targetTab}-tab`).classList.add('active');
                
                // Charger les donn√©es sp√©cifiques √† l'onglet
                if (targetTab === 'stock') {
                    loadStockData();
                } else if (targetTab === 'suppliers') {
                    loadSuppliersData();
                }
            });
        });
    }
    
    // Gestion des groupes d'√¢ges
    function initAgeGroups() {
        if (addGroupBtn) {
            addGroupBtn.addEventListener('click', addNewGroup);
        }
    }
    
    function addNewGroup() {
        groupCounter++;
        const newGroup = createGroupElement(groupCounter);
        
        // Ins√©rer le nouveau groupe avant le bouton d'ajout
        addGroupBtn.parentNode.insertBefore(newGroup, addGroupBtn);
    }
    
    function createGroupElement(groupNumber) {
        const groupDiv = document.createElement('div');
        groupDiv.className = 'age-group';
        groupDiv.id = `group-${groupNumber}`;
        
        groupDiv.innerHTML = `
            <div class="group-header">
                <h4>Groupe ${groupNumber}</h4>
                <button type="button" class="remove-group-btn" onclick="removeGroup(${groupNumber})" style="background:none; color:#e74c3c; padding:0 5px;">&times;</button>
            </div>
            
            <div class="group-content">
                <div class="form-group">
                    <label>Tranche d'√¢ge :</label>
                    <select name="group-${groupNumber}-age-range" class="form-control">
                        <option value="2.5-5">Maternelle (2,5-5 ans)</option>
                        <option value="6-10">Primaire (6-10 ans)</option>
                        <option value="11-15">Coll√®ge (11-15 ans)</option>
                        <option value="16-18">Lyc√©e (16-18 ans)</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label>Nombre de personnes :</label>
                    <input type="number" name="group-${groupNumber}-count" class="form-control" min="1" placeholder="Ex: 100" value="100">
                </div>
                
                <div class="form-group">
                    <label>Allergies ou r√©gimes :</label>
                    <div class="restrictions-list" id="group-${groupNumber}-restrictions">
                        <div class="restriction-item">
                            <select name="group-${groupNumber}-restriction-type" class="form-control">
                                <option value="">-- S√©lectionnez --</option>
                                <option value="vegetarian">V√©g√©tarien</option>
                                <option value="vegan">V√©g√©talien</option>
                                <option value="gluten-free">Sans gluten</option>
                                <option value="lactose-free">Sans lactose</option>
                                <option value="nuts-free">Sans fruits √† coque</option>
                                <option value="peanuts-free">Sans arachides</option>
                                <option value="eggs-free">Sans ≈ìufs</option>
                                <option value="fish-free">Sans poisson</option>
                                <option value="shellfish-free">Sans crustac√©s</option>
                                <option value="soy-free">Sans soja</option>
                                <option value="halal">Halal</option>
                                <option value="kosher">Kosher</option>
                            </select>
                            <input type="number" name="group-${groupNumber}-restriction-count" class="form-control" min="0" placeholder="Nb." style="width: 80px;">
                            <button type="button" class="remove-restriction-btn" onclick="removeRestriction(this)" style="background:none; color:#e74c3c; padding:0 5px;">&times;</button>
                        </div>
                    </div>
                    <button type="button" class="add-restriction-btn" onclick="addRestriction(${groupNumber})" style="font-size:0.8em; padding: 5px 10px; margin-top:5px; background-color:#3498db; color: white; border: none; border-radius: 4px;">+ Ajouter une restriction</button>
                </div>
            </div>
        `;
        
        return groupDiv;
    }
    
    // Fonctions globales pour les groupes
    window.removeGroup = function(groupNumber) {
        const groupElement = document.getElementById(`group-${groupNumber}`);
        if (groupElement) {
            groupElement.remove();
        }
    };
    
    window.addRestriction = function(groupNumber) {
        const restrictionsContainer = document.getElementById(`group-${groupNumber}-restrictions`);
        const restrictionItem = document.createElement('div');
        restrictionItem.className = 'restriction-item';
        
        restrictionItem.innerHTML = `
            <select name="group-${groupNumber}-restriction-type" class="form-control">
                <option value="">-- S√©lectionnez --</option>
                <option value="vegetarian">V√©g√©tarien</option>
                <option value="vegan">V√©g√©talien</option>
                <option value="gluten-free">Sans gluten</option>
                <option value="lactose-free">Sans lactose</option>
                <option value="nuts-free">Sans fruits √† coque</option>
                <option value="peanuts-free">Sans arachides</option>
                <option value="eggs-free">Sans ≈ìufs</option>
                <option value="fish-free">Sans poisson</option>
                <option value="shellfish-free">Sans crustac√©s</option>
                <option value="soy-free">Sans soja</option>
                <option value="halal">Halal</option>
                <option value="kosher">Kosher</option>
            </select>
            <input type="number" name="group-${groupNumber}-restriction-count" class="form-control" min="0" placeholder="Nb." style="width: 80px;">
            <button type="button" class="remove-restriction-btn" onclick="removeRestriction(this)" style="background:none; color:#e74c3c; padding:0 5px;">&times;</button>
        `;
        
        restrictionsContainer.appendChild(restrictionItem);
    };
    
    window.removeRestriction = function(button) {
        button.parentElement.remove();
    };
    
    // Gestion du stock
    function initStock() {
        if (addStockItemBtn) {
            addStockItemBtn.addEventListener('click', showAddStockModal);
        }
        
        if (refreshStockBtn) {
            refreshStockBtn.addEventListener('click', loadStockData);
        }
        
        if (stockSearch) {
            stockSearch.addEventListener('input', filterStock);
        }
        
        if (stockCategoryFilter) {
            stockCategoryFilter.addEventListener('change', filterStock);
        }
    }
    
    async function loadStockData() {
        try {
            // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
            if (!token) {
                console.error('‚ùå Token d\'authentification manquant');
                console.log('üîÑ Utilisation des donn√©es mock√©es...');
                loadMockStockData();
                return;
            }

            console.log('üîÑ Chargement du stock depuis l\'API...');

            const response = await fetch('/api/stock', {
                credentials: 'include', // üç™ Cookie HTTP-Only
                method: 'GET',
                headers: {
                    // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
'Content-Type': 'application/json'
                }
            });

            console.log('üì° R√©ponse API stock:', response.status, response.statusText);

            if (!response.ok) {
                if (response.status === 401) {
                    console.error('‚ùå Token invalide ou expir√©');
                    console.log('üîÑ Utilisation des donn√©es mock√©es...');
                    loadMockStockData();
                    return;
                }
                throw new Error(`Erreur HTTP: ${response.status}`);
            }

            const result = await response.json();
            stockData = result.data || [];
            console.log('‚úÖ Stock charg√© depuis l\'API:', stockData.length, 'articles');
            renderStockTable();
        } catch (error) {
            console.error('‚ùå Erreur lors du chargement du stock:', error);
            console.log('üîÑ Utilisation des donn√©es mock√©es...');
            loadMockStockData();
        }
    }

    function loadMockStockData() {
        stockData = [
            { _id: 'mock1', name: 'Riz Basmati', category: 'cereales', quantity: 10, unit: 'kg', expiration: '2024-12-31', supplier: 'Fruits & L√©gumes SA', location: 'R√©serve A' },
            { _id: 'mock2', name: 'Pommes de terre', category: 'legumes', quantity: 5, unit: 'kg', expiration: '2024-11-15', supplier: 'Fruits & L√©gumes SA', location: 'R√©serve B' },
            { _id: 'mock3', name: 'Poulet', category: 'viandes', quantity: 2, unit: 'kg', expiration: '2024-11-10', supplier: 'Boucherie Martin', location: 'Cong√©lateur' },
            { _id: 'mock4', name: 'Lait', category: 'produits-laitiers', quantity: 30, unit: 'L', expiration: '2024-11-08', supplier: 'Produits Laitiers SA', location: 'R√©frig√©rateur' }
        ];
        console.log('üì¶ Donn√©es mock√©es de stock charg√©es:', stockData.length, 'articles');
        renderStockTable();
    }
    
    function renderStockTable() {
        if (!stockTableBody) return;
        
        stockTableBody.innerHTML = '';
        
        stockData.forEach(item => {
            const row = document.createElement('tr');
            const categoryLabels = {
                'legumes': 'L√©gumes',
                'viandes': 'Viandes',
                'poissons': 'Poissons',
                'produits-laitiers': 'Produits laitiers',
                'cereales': 'C√©r√©ales',
                'epices': '√âpices',
                'boissons': 'Boissons',
                'fruits': 'Fruits',
                'autres': 'Autres'
            };
            
            row.innerHTML = `
                <td><strong>${item.name}</strong>${item.supplier ? `<br><small style="color: #666;">${item.supplier}</small>` : ''}</td>
                <td><span class="category-badge" style="background: #e3f2fd; color: #1976d2; padding: 0.25rem 0.5rem; border-radius: 12px; font-size: 0.8em;">${categoryLabels[item.category] || item.category}</span></td>
                <td><strong>${item.quantity}</strong></td>
                <td>${item.unit}</td>
                <td>${item.expiration || item.expirationDate}</td>
                <td>
                    <button class="btn-small btn-primary" onclick="editStockItem('${item._id}')">Modifier</button>
                    <button class="btn-small" style="background-color: #e74c3c; color: white;" onclick="deleteStockItem('${item._id}')">Supprimer</button>
                </td>
            `;
            stockTableBody.appendChild(row);
        });
    }
    
    function filterStock() {
        const searchTerm = stockSearch.value.toLowerCase();
        const categoryFilter = stockCategoryFilter.value;
        
        const filteredData = stockData.filter(item => {
            const matchesSearch = item.name.toLowerCase().includes(searchTerm);
            const matchesCategory = !categoryFilter || item.category === categoryFilter;
            return matchesSearch && matchesCategory;
        });
        
        // Rendu temporaire avec les donn√©es filtr√©es
        const originalData = stockData;
        stockData = filteredData;
        renderStockTable();
        stockData = originalData;
    }
    
    function showAddStockModal() {
        console.log('‚ûï Ouverture de la modal d\'ajout d\'article');
        // Cr√©er une modal d'ajout d'article
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content" style="max-width: 600px;">
                <div class="modal-header">
                    <h3>Ajouter un article au stock</h3>
                    <button class="close-modal" onclick="this.closest('.modal-overlay').remove()">&times;</button>
                </div>
                <div class="modal-tabs">
                    <button class="tab-btn active" data-tab="manual">Saisie manuelle</button>
                    <button class="tab-btn" data-tab="ocr">Scanner OCR</button>
                </div>
                <form id="add-stock-form">
                    <!-- Onglet Saisie manuelle -->
                    <div id="manual-tab" class="tab-content active">
                        <div class="form-group">
                            <label for="stock-name">Nom de l'article *</label>
                            <input type="text" id="stock-name" name="name" class="form-control" required 
                                   placeholder="Ex: Riz basmati" oninput="window.autoDetectCategory(this.value)">
                        </div>
                        <div class="form-group">
                            <label for="stock-category">Cat√©gorie *</label>
                            <select id="stock-category" name="category" class="form-control" required>
                                <option value="">-- S√©lectionnez une cat√©gorie --</option>
                                <option value="legumes">L√©gumes</option>
                                <option value="viandes">Viandes</option>
                                <option value="poissons">Poissons</option>
                                <option value="produits-laitiers">Produits laitiers</option>
                                <option value="cereales">C√©r√©ales</option>
                                <option value="epices">√âpices</option>
                                <option value="boissons">Boissons</option>
                                <option value="fruits">Fruits</option>
                                <option value="autres">Autres</option>
                            </select>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="stock-quantity">Quantit√© *</label>
                                <input type="number" id="stock-quantity" name="quantity" class="form-control" 
                                       min="0" step="0.1" required placeholder="Ex: 5">
                            </div>
                            <div class="form-group">
                                <label for="stock-unit">Unit√© *</label>
                                <select id="stock-unit" name="unit" class="form-control" required>
                                    <option value="">-- Unit√© --</option>
                                    <option value="kg">kg</option>
                                    <option value="g">g</option>
                                    <option value="L">L</option>
                                    <option value="ml">ml</option>
                                    <option value="pi√®ces">pi√®ces</option>
                                    <option value="bo√Ætes">bo√Ætes</option>
                                    <option value="sachets">sachets</option>
                                    <option value="bouteilles">bouteilles</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="stock-expiration">Date d'expiration *</label>
                            <input type="date" id="stock-expiration" name="expirationDate" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="stock-supplier">Fournisseur</label>
                            <input type="text" id="stock-supplier" name="supplier" class="form-control" 
                                   placeholder="Ex: Fruits & L√©gumes SA">
                        </div>
                        <div class="form-group">
                            <label for="stock-location">Emplacement</label>
                            <input type="text" id="stock-location" name="location" class="form-control" 
                                   placeholder="Ex: R√©serve A, √âtag√®re 3">
                        </div>
                        <div class="form-group">
                            <label for="stock-price">Prix (‚Ç¨)</label>
                            <input type="number" id="stock-price" name="price" class="form-control" 
                                   min="0" step="0.01" placeholder="Ex: 2.50">
                        </div>
                        <div class="form-group">
                            <label for="stock-notes">Notes</label>
                            <textarea id="stock-notes" name="notes" class="form-control" rows="3" 
                                      placeholder="Informations suppl√©mentaires..."></textarea>
                        </div>
                    </div>
                    
                    <!-- Onglet Scanner OCR -->
                    <div id="ocr-tab" class="tab-content">
                        <div class="ocr-container">
                            <div class="camera-preview" id="camera-preview" style="display: none;">
                                <video id="video" width="100%" height="300" autoplay></video>
                                <canvas id="canvas" style="display: none;"></canvas>
                            </div>
                            <div class="ocr-upload">
                                <input type="file" id="image-upload" accept="image/*" style="display: none;">
                                <button type="button" id="upload-btn" class="btn-secondary">
                                    <i class="fas fa-upload"></i> Choisir une image
                                </button>
                                <button type="button" id="camera-btn" class="btn-primary">
                                    <i class="fas fa-camera"></i> Prendre une photo
                                </button>
                            </div>
                            <div class="ocr-results" id="ocr-results" style="display: none;">
                                <h4>Texte d√©tect√© :</h4>
                                <div id="detected-text" class="detected-text"></div>
                                <button type="button" id="use-ocr-data" class="btn-primary">
                                    <i class="fas fa-check"></i> Utiliser ces donn√©es
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="modal-actions">
                        <button type="button" class="btn-secondary" onclick="this.closest('.modal-overlay').remove()">Annuler</button>
                        <button type="submit" class="btn-primary">Ajouter au stock</button>
                    </div>
                </form>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Initialiser les onglets de la modal
        initModalTabs(modal);
        
        // Initialiser l'OCR
        initOCR(modal);
        
        // G√©rer la soumission du formulaire
        document.getElementById('add-stock-form').addEventListener('submit', async (e) => {
                e.preventDefault();
            await addStockItem(e.target);
        });
        
        // D√©finir la date d'expiration par d√©faut (dans 30 jours)
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 30);
        document.getElementById('stock-expiration').value = tomorrow.toISOString().split('T')[0];
        
        // Test de la d√©tection automatique
        console.log('üß™ Test de la d√©tection automatique des cat√©gories');
        console.log('Essayez de taper: banane, riz, tomate, poulet, lait, etc.');
    }
    
    // D√©tection automatique des cat√©gories
    window.autoDetectCategory = function(productName) {
        if (!productName || productName.trim() === '') {
            return;
        }
        
        const name = productName.toLowerCase().trim();
        const categorySelect = document.getElementById('stock-category');
        
        if (!categorySelect) {
            console.log('‚ùå √âl√©ment stock-category non trouv√©');
            return;
        }
        
        // Mots-cl√©s pour chaque cat√©gorie (plus complets)
        const categoryKeywords = {
            'fruits': ['pomme', 'banane', 'orange', 'citron', 'fraise', 'cerise', 'p√™che', 'poire', 'raisin', 'fruit', 'kiwi', 'mangue', 'ananas', 'melon', 'past√®que', 'abricot', 'prune', 'framboise', 'myrtille', 'cassis', 'groseille', 'figue', 'datte', 'noix de coco', 'avocat', 'tomate cerise'],
            'legumes': ['carotte', 'tomate', 'pomme de terre', 'oignon', 'courgette', 'aubergine', 'poivron', 'salade', '√©pinard', 'brocoli', 'chou', 'radis', 'concombre', 'haricot', 'petit pois', 'l√©gume', 'courge', 'potiron', 'navet', 'betterave', 'c√©leri', 'fenouil', 'artichaut', 'asperge', 'champignon', 'endive', 'chicor√©e', 'laitue', 'roquette', 'm√¢che', '√©pinard', 'blette', 'poireau', 'ail', '√©chalote'],
            'viandes': ['b≈ìuf', 'boeuf', 'porc', 'agneau', 'veau', 'poulet', 'dinde', 'jambon', 'saucisse', 'bacon', 'steak', 'c√¥telette', 'viande', 'charcuterie', 'r√¥ti', 'gigot', 'c√¥te', 'entrec√¥te', 'bifteck', 'escalope', 'c√¥telette', 'andouille', 'boudin', 'p√¢t√©', 'rillettes', 'terrine'],
            'poissons': ['saumon', 'thon', 'cabillaud', 'merlu', 'sole', 'crevette', 'moule', 'hu√Ætre', 'poisson', 'fruits de mer', 'crustac√©', 'langouste', 'homard', 'crabe', 'calmar', 'poulpe', 'anchois', 'sardine', 'maquereau', 'truite', 'bar', 'dorade', 'lotte', 'raie', 'rouget', 'saint-pierre'],
            'produits-laitiers': ['lait', 'fromage', 'yaourt', 'beurre', 'cr√®me', 'fromage blanc', 'laitage', 'dairy', 'brie', 'camembert', 'roquefort', 'ch√®vre', 'emmental', 'comt√©', 'gruy√®re', 'parmesan', 'mozzarella', 'ricotta', 'cottage', 'kiri', 'vache qui rit', 'petit suisse', 'faisselle'],
            'cereales': ['riz', 'p√¢tes', 'pain', 'farine', 'bl√©', 'avoine', 'quinoa', 'boulgour', 'semoule', 'c√©r√©ale', 'grain', 'orge', '√©peautre', 'seigle', 'ma√Øs', 'sarrasin', 'millet', 'amarante', 'spaghetti', 'macaroni', 'penne', 'fusilli', 'tagliatelle', 'ravioli', 'gnocchi', 'couscous', 'polenta'],
            'epices': ['sel', 'poivre', 'herbes', '√©pice', 'condiment', 'assaisonnement', 'thym', 'romarin', 'basilic', 'persil', 'ciboulette', 'estragon', 'cerfeuil', 'origan', 'marjolaine', 'sauge', 'laurier', 'cannelle', 'gingembre', 'curcuma', 'cumin', 'coriandre', 'cardamome', 'clou de girofle', 'muscade', 'piment', 'paprika', 'curry', 'herbes de provence'],
            'boissons': ['eau', 'jus', 'soda', 'caf√©', 'th√©', 'vin', 'bi√®re', 'boisson', 'liquide', 'coca', 'pepsi', 'fanta', 'sprite', 'orangina', 'limonade', 'sirop', 'smoothie', 'milkshake', 'champagne', 'cidre', 'whisky', 'vodka', 'rhum', 'cognac', 'armagnac', 'liqueur', 'ap√©ritif', 'digestif'],
            'autres': ['huile', 'vinaigre', 'moutarde', 'ketchup', 'mayonnaise', 'sauce', 'conserve', 'conserves', 'biscuit', 'g√¢teau', 'chocolat', 'bonbon', 'confiserie', 'p√¢tisserie', 'viennoiserie', 'croissant', 'pain au chocolat', 'brioche', 'tarte', 'flan', 'cr√®me', 'dessert']
        };
        
        console.log(`üîç Recherche de cat√©gorie pour: "${name}"`);
        
        // Chercher une correspondance
        for (const [category, keywords] of Object.entries(categoryKeywords)) {
            if (keywords.some(keyword => name.includes(keyword))) {
                categorySelect.value = category;
                console.log(`üè∑Ô∏è Cat√©gorie d√©tect√©e: ${category} pour "${productName}"`);
                
                // Ajouter un effet visuel
                categorySelect.style.backgroundColor = '#e8f5e8';
                categorySelect.style.borderColor = '#4caf50';
                setTimeout(() => {
                    categorySelect.style.backgroundColor = '';
                    categorySelect.style.borderColor = '';
                }, 1000);
                
                return;
            }
        }
        
        // Si aucune correspondance, laisser vide
        categorySelect.value = '';
        console.log(`‚ùå Aucune cat√©gorie d√©tect√©e pour "${productName}"`);
    };
    
    // Gestion des onglets dans la modal
    function initModalTabs(modal) {
        const tabButtons = modal.querySelectorAll('.tab-btn');
        const tabContents = modal.querySelectorAll('.tab-content');
        
        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                // Retirer la classe active de tous les boutons et contenus
                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabContents.forEach(content => content.classList.remove('active'));
                
                // Ajouter la classe active au bouton cliqu√©
                button.classList.add('active');
                
                // Afficher le contenu correspondant
                const targetTab = button.dataset.tab;
                const targetContent = modal.querySelector(`#${targetTab}-tab`);
                if (targetContent) {
                    targetContent.classList.add('active');
                }
            });
        });
    }
    
    // Initialisation de l'OCR
    function initOCR(modal) {
        const uploadBtn = modal.querySelector('#upload-btn');
        const cameraBtn = modal.querySelector('#camera-btn');
        const imageUpload = modal.querySelector('#image-upload');
        const video = modal.querySelector('#video');
        const canvas = modal.querySelector('#canvas');
        const cameraPreview = modal.querySelector('#camera-preview');
        const ocrResults = modal.querySelector('#ocr-results');
        const detectedText = modal.querySelector('#detected-text');
        const useOcrDataBtn = modal.querySelector('#use-ocr-data');
        
        // Gestion de l'upload d'image
        uploadBtn.addEventListener('click', () => imageUpload.click());
        imageUpload.addEventListener('change', (e) => {
            if (e.target.files[0]) {
                processImage(e.target.files[0]);
            }
        });
        
        // Gestion de la cam√©ra
        cameraBtn.addEventListener('click', async () => {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                video.srcObject = stream;
                cameraPreview.style.display = 'block';
                cameraBtn.textContent = 'üì∑ Capturer';
                cameraBtn.onclick = capturePhoto;
            } catch (error) {
                console.error('Erreur d\'acc√®s √† la cam√©ra:', error);
                alert('Impossible d\'acc√©der √† la cam√©ra');
            }
        });
        
        // Capture de photo
        function capturePhoto() {
            const context = canvas.getContext('2d');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            context.drawImage(video, 0, 0);
            
            canvas.toBlob((blob) => {
                processImage(blob);
                // Arr√™ter la cam√©ra
                video.srcObject.getTracks().forEach(track => track.stop());
                cameraPreview.style.display = 'none';
                cameraBtn.textContent = 'üì∑ Prendre une photo';
                cameraBtn.onclick = () => cameraBtn.click();
            });
        }
        
        // Traitement de l'image avec OCR
        async function processImage(file) {
            try {
                console.log('üîç Traitement OCR en cours...');
                
                // Simulation de l'OCR (remplacer par une vraie API OCR)
                const mockOcrResult = await simulateOCR(file);
                
                detectedText.innerHTML = `
                    <div class="ocr-item">
                        <strong>Nom d√©tect√©:</strong> ${mockOcrResult.name}
                    </div>
                    <div class="ocr-item">
                        <strong>Cat√©gorie sugg√©r√©e:</strong> ${mockOcrResult.category}
                    </div>
                    <div class="ocr-item">
                        <strong>Quantit√©:</strong> ${mockOcrResult.quantity}
                    </div>
                    <div class="ocr-item">
                        <strong>Date d'expiration:</strong> ${mockOcrResult.expiration}
                    </div>
                `;
                
                ocrResults.style.display = 'block';
                
                // Utiliser les donn√©es OCR
                useOcrDataBtn.addEventListener('click', () => {
                    fillFormWithOcrData(mockOcrResult);
                    // Passer √† l'onglet manuel
                    modal.querySelector('[data-tab="manual"]').click();
                });
                
            } catch (error) {
                console.error('Erreur OCR:', error);
                alert('Erreur lors du traitement de l\'image');
            }
        }
        
        // Simulation de l'OCR (remplacer par une vraie API)
        async function simulateOCR(file) {
            // Simulation d'un d√©lai de traitement
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // Donn√©es simul√©es bas√©es sur le nom du fichier ou al√©atoires
            const mockResults = [
                { name: 'Riz Basmati', category: 'cereales', quantity: '2', expiration: '2024-12-31' },
                { name: 'Tomates', category: 'legumes', quantity: '1.5', expiration: '2024-11-15' },
                { name: 'Poulet', category: 'viandes', quantity: '1', expiration: '2024-11-10' },
                { name: 'Lait', category: 'produits-laitiers', quantity: '1', expiration: '2024-11-20' },
                { name: 'Pommes', category: 'fruits', quantity: '2', expiration: '2024-11-25' }
            ];
            
            return mockResults[Math.floor(Math.random() * mockResults.length)];
        }
        
        // Remplir le formulaire avec les donn√©es OCR
        function fillFormWithOcrData(data) {
            document.getElementById('stock-name').value = data.name;
            document.getElementById('stock-category').value = data.category;
            document.getElementById('stock-quantity').value = data.quantity;
            document.getElementById('stock-expiration').value = data.expiration;
            
            // D√©tecter l'unit√© automatiquement
            if (data.quantity.includes('.')) {
                document.getElementById('stock-unit').value = 'kg';
            } else {
                document.getElementById('stock-unit').value = 'pi√®ces';
            }
            
            console.log('üìù Formulaire rempli avec les donn√©es OCR');
        }
    }
    
    // Ajout d'un article au stock
    async function addStockItem(form) {
        try {
            // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
            if (!token) {
                console.log('üîÑ Mode mock: ajout d\'article local');
                addMockStockItem(form);
                return;
            }

            const formData = new FormData(form);
            const stockData = {
                name: formData.get('name'),
                category: formData.get('category'),
                quantity: parseFloat(formData.get('quantity')),
                unit: formData.get('unit'),
                expirationDate: formData.get('expirationDate'),
                supplier: formData.get('supplier'),
                location: formData.get('location'),
                price: parseFloat(formData.get('price')) || 0,
                notes: formData.get('notes')
            };

            const response = await fetch('/api/stock', {
                credentials: 'include', // üç™ Cookie HTTP-Only
                method: 'POST',
                headers: {
                    // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
'Content-Type': 'application/json'
                },
                body: JSON.stringify(stockData)
            });

            if (!response.ok) {
                if (response.status === 401) {
                    console.log('üîÑ Token invalide, passage en mode mock');
                    addMockStockItem(form);
                    return;
                }
                const error = await response.json();
                throw new Error(error.message || 'Erreur lors de l\'ajout de l\'article');
            }

            const result = await response.json();
            console.log('‚úÖ Article ajout√© via API:', result.data);
            
            // Fermer la modal et recharger les donn√©es
            document.querySelector('.modal-overlay').remove();
            await loadStockData();
            
            alert('Article ajout√© au stock avec succ√®s !');
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'ajout de l\'article:', error);
            console.log('üîÑ Passage en mode mock');
            addMockStockItem(form);
        }
    }

    function addMockStockItem(form) {
        const formData = new FormData(form);
        const newItem = {
            _id: 'mock' + Date.now(),
            name: formData.get('name'),
            category: formData.get('category'),
            quantity: parseFloat(formData.get('quantity')),
            unit: formData.get('unit'),
            expiration: formData.get('expirationDate'),
            supplier: formData.get('supplier'),
            location: formData.get('location'),
            price: parseFloat(formData.get('price')) || 0,
            notes: formData.get('notes')
        };

        stockData.push(newItem);
        console.log('üì¶ Article ajout√© en mode mock:', newItem);
        
        // Fermer la modal et recharger l'affichage
        document.querySelector('.modal-overlay').remove();
        renderStockTable();
        
        alert('Article ajout√© en mode local ! (Les donn√©es ne seront pas sauvegard√©es)');
    }
    
    // Gestion des fournisseurs
    function initSuppliers() {
        if (addSupplierBtn) {
            addSupplierBtn.addEventListener('click', showAddSupplierModal);
        }
        
        if (refreshSuppliersBtn) {
            refreshSuppliersBtn.addEventListener('click', loadSuppliersData);
        }
    }
    
    async function loadSuppliersData() {
        console.log('üîÑ Chargement des fournisseurs depuis l\'API...');
        try {
            // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
            if (!token) {
                console.error('‚ùå Token d\'authentification manquant');
                console.log('üîÑ Utilisation des donn√©es mock√©es...');
                loadMockSuppliersData();
                return;
            }

            console.log('üîë Token trouv√©:', token.substring(0, 20) + '...');

            // Charger les fournisseurs enregistr√©s par les collectivit√©s
            const suppliersResponse = await fetch('/api/suppliers', {
                credentials: 'include', // üç™ Cookie HTTP-Only
                method: 'GET',
                headers: {
                    // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
'Content-Type': 'application/json'
                }
            });

            // Charger aussi les fournisseurs actifs (ceux qui se sont connect√©s)
            const activeSuppliersResponse = await fetch('/api/users/suppliers', {
                credentials: 'include', // üç™ Cookie HTTP-Only
                method: 'GET',
                headers: {
                    // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
'Content-Type': 'application/json'
                }
            });

            console.log('üì° R√©ponse fournisseurs:', suppliersResponse.status);
            console.log('üì° R√©ponse fournisseurs actifs:', activeSuppliersResponse.status);

            let suppliersData = [];
            let activeSuppliers = [];

            // Traiter les fournisseurs enregistr√©s
            if (suppliersResponse.ok) {
                const result = await suppliersResponse.json();
                suppliersData = result.data || [];
                console.log('‚úÖ Fournisseurs enregistr√©s:', suppliersData.length);
            }

            // Traiter les fournisseurs actifs
            if (activeSuppliersResponse.ok) {
                const result = await activeSuppliersResponse.json();
                activeSuppliers = result.data || [];
                console.log('‚úÖ Fournisseurs actifs:', activeSuppliers.length);
            }

            // Fusionner les deux listes (√©viter les doublons)
            const allSuppliers = [...suppliersData];
            
            activeSuppliers.forEach(activeSupplier => {
                // V√©rifier si ce fournisseur n'est pas d√©j√† dans la liste
                const exists = allSuppliers.some(supplier => 
                    supplier.email === activeSupplier.email || 
                    supplier.name === activeSupplier.businessName
                );
                
                if (!exists) {
                    // Ajouter le fournisseur actif √† la liste
                    allSuppliers.push({
                        _id: activeSupplier._id,
                        name: activeSupplier.businessName || activeSupplier.name,
                        contact: activeSupplier.name,
                        email: activeSupplier.email,
                        phone: activeSupplier.phone || 'Non renseign√©',
                        categories: ['autres'], // Cat√©gorie par d√©faut
                        notes: 'Fournisseur actif - s\'est connect√© r√©cemment',
                        status: 'active'
                    });
                }
            });

            suppliersData = allSuppliers;
            console.log('‚úÖ Total fournisseurs (enregistr√©s + actifs):', suppliersData.length);
            renderSuppliersList();
            
        } catch (error) {
            console.error('‚ùå Erreur lors du chargement des fournisseurs:', error);
            console.log('üîÑ Utilisation des donn√©es mock√©es...');
            loadMockSuppliersData();
        }
    }

    function loadMockSuppliersData() {
        // R√©cup√©rer les informations du fournisseur connect√© depuis localStorage
        const connectedUser = JSON.parse(localStorage.getItem('user') || '{}');
        const connectedSupplier = connectedUser.role === 'fournisseur' ? {
            _id: connectedUser.id || 'connected-supplier',
            name: connectedUser.businessName || connectedUser.name || 'Fournisseur Connect√©',
            contact: connectedUser.name || 'Contact',
            phone: connectedUser.phone || 'Non renseign√©',
            email: connectedUser.email || 'email@example.com',
            categories: ['autres'],
            notes: 'Fournisseur actuellement connect√© - s\'est connect√© r√©cemment',
            status: 'active'
        } : null;

        suppliersData = [
            { 
                _id: 'mock1', 
                name: 'Fruits & L√©gumes SA', 
                contact: 'Jean Dupont', 
                phone: '01 23 45 67 89', 
                email: 'contact@fruits-legumes.fr',
                categories: ['legumes', 'fruits'],
                notes: 'Sp√©cialiste des produits frais de saison. Livraison quotidienne.'
            },
            { 
                _id: 'mock2', 
                name: 'Boucherie Martin', 
                contact: 'Pierre Martin', 
                phone: '01 23 45 67 90', 
                email: 'martin@boucherie.fr',
                categories: ['viandes'],
                notes: 'Boucherie traditionnelle depuis 1950. Viandes de qualit√© sup√©rieure.'
            },
            { 
                _id: 'mock3', 
                name: 'Poissonnerie du Port', 
                contact: 'Marie Leclerc', 
                phone: '01 23 45 67 91', 
                email: 'info@poissonnerie.fr',
                categories: ['poissons'],
                notes: 'Poissons frais du jour. Approvisionnement direct des ports bretons.'
            },
            { 
                _id: 'mock4', 
                name: 'Produits Laitiers Bio', 
                contact: 'Sophie Bernard', 
                phone: '01 23 45 67 92', 
                email: 'sophie@laitiers-bio.fr',
                categories: ['produits-laitiers'],
                notes: 'Produits laitiers biologiques. Fromages artisanaux.'
            },
            { 
                _id: 'mock5', 
                name: '√âpicerie Fine', 
                contact: 'Antoine Moreau', 
                phone: '01 23 45 67 93', 
                email: 'antoine@epicerie-fine.fr',
                categories: ['epices', 'cereales'],
                notes: '√âpicerie fine et produits d\'exception. Import direct.'
            }
        ];

        // Ajouter le fournisseur connect√© s'il existe
        if (connectedSupplier) {
            suppliersData.unshift(connectedSupplier); // Ajouter en premier
            console.log('‚úÖ Fournisseur connect√© ajout√© aux donn√©es mock√©es:', connectedSupplier.name);
        }

        console.log('üì¶ Donn√©es mock√©es charg√©es:', suppliersData.length, 'fournisseurs');
        renderSuppliersList();
    }
    
    function renderSuppliersList() {
        if (!suppliersList) return;
        
        suppliersList.innerHTML = '';
        
        if (suppliersData.length === 0) {
            suppliersList.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-truck"></i>
                    <h3>Aucun fournisseur enregistr√©</h3>
                    <p>Commencez par ajouter votre premier fournisseur</p>
                </div>
            `;
            return;
        }
        
        suppliersData.forEach(supplier => {
            const card = document.createElement('div');
            card.className = 'supplier-card';
            
            // Formater les cat√©gories avec des badges
            const categoryBadges = supplier.categories && supplier.categories.length > 0 
                ? supplier.categories.map(cat => `<span class="category-badge">${cat}</span>`).join('')
                : '<span class="no-categories">Aucune cat√©gorie</span>';
            
            card.innerHTML = `
                <div class="supplier-header">
                    <h3 class="supplier-name">${supplier.name}</h3>
                    <div class="supplier-status">
                        <span class="status-badge active">Actif</span>
                    </div>
                </div>
                
                <div class="supplier-info">
                    <div class="supplier-detail">
                        <i class="fas fa-user"></i>
                        <span class="label">Contact:</span>
                        <span class="value">${supplier.contact}</span>
                    </div>
                    
                    <div class="supplier-detail">
                        <i class="fas fa-envelope"></i>
                        <span class="label">Email:</span>
                        <span class="value">${supplier.email || 'N/A'}</span>
                    </div>
                    
                    <div class="supplier-detail">
                        <i class="fas fa-phone"></i>
                        <span class="label">T√©l√©phone:</span>
                        <span class="value">${supplier.phone}</span>
                    </div>
                    
                    <div class="supplier-detail">
                        <i class="fas fa-tags"></i>
                        <span class="label">Cat√©gories:</span>
                        <div class="category-badges">${categoryBadges}</div>
                    </div>
                </div>
                
                <div class="supplier-actions">
                    <button class="btn-action btn-primary" onclick="browseSupplierProducts('${supplier._id}', '${supplier.name}')" title="Voir le catalogue">
                        <i class="fas fa-shopping-cart"></i>
                        Voir le catalogue
                    </button>
                    <button class="btn-action btn-secondary" onclick="editSupplier('${supplier._id}')" title="Modifier">
                        <i class="fas fa-edit"></i>
                        Modifier
                    </button>
                    <button class="btn-action btn-danger" onclick="deleteSupplier('${supplier._id}')" title="Supprimer">
                        <i class="fas fa-trash"></i>
                        Supprimer
                    </button>
                </div>
            `;
            suppliersList.appendChild(card);
        });
    }
    
    function showAddSupplierModal() {
        console.log('‚ûï Ouverture de la modal d\'ajout de fournisseur');
        // Cr√©er une modal d'ajout de fournisseur
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>Ajouter un fournisseur</h3>
                    <button class="close-modal" onclick="this.closest('.modal-overlay').remove()">&times;</button>
                </div>
                <form id="add-supplier-form">
                    <div class="form-group">
                        <label for="supplier-name">Nom du fournisseur *</label>
                        <input type="text" id="supplier-name" name="name" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label for="supplier-contact">Contact *</label>
                        <input type="text" id="supplier-contact" name="contact" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label for="supplier-email">Email *</label>
                        <input type="email" id="supplier-email" name="email" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label for="supplier-phone">T√©l√©phone *</label>
                        <input type="tel" id="supplier-phone" name="phone" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label for="supplier-categories">Cat√©gories</label>
                        <select id="supplier-categories" name="categories" class="form-control" multiple>
                            <option value="legumes">L√©gumes</option>
                            <option value="viandes">Viandes</option>
                            <option value="poissons">Poissons</option>
                            <option value="produits-laitiers">Produits laitiers</option>
                            <option value="cereales">C√©r√©ales</option>
                            <option value="epices">√âpices</option>
                            <option value="boissons">Boissons</option>
                            <option value="autres">Autres</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="supplier-notes">Notes</label>
                        <textarea id="supplier-notes" name="notes" class="form-control" rows="3"></textarea>
                    </div>
                    <div class="modal-actions">
                        <button type="button" class="btn-secondary" onclick="this.closest('.modal-overlay').remove()">Annuler</button>
                        <button type="submit" class="btn-primary">Ajouter</button>
                    </div>
                </form>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // G√©rer la soumission du formulaire
        document.getElementById('add-supplier-form').addEventListener('submit', async (e) => {
                e.preventDefault();
            await addSupplier(e.target);
        });
    }
    
    async function addSupplier(form) {
        try {
            // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
            if (!token) {
                console.log('üîÑ Mode mock: ajout de fournisseur local');
                addMockSupplier(form);
                return;
            }

            const formData = new FormData(form);
            const supplierData = {
                name: formData.get('name'),
                contact: formData.get('contact'),
                email: formData.get('email'),
                phone: formData.get('phone'),
                categories: Array.from(formData.getAll('categories')),
                notes: formData.get('notes')
            };

            const response = await fetch('/api/suppliers', {
                credentials: 'include', // üç™ Cookie HTTP-Only
                method: 'POST',
                headers: {
                    // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
'Content-Type': 'application/json'
                },
                body: JSON.stringify(supplierData)
            });

            if (!response.ok) {
                if (response.status === 401) {
                    console.log('üîÑ Token invalide, passage en mode mock');
                    addMockSupplier(form);
                    return;
                }
                const error = await response.json();
                throw new Error(error.message || 'Erreur lors de l\'ajout du fournisseur');
            }

            const result = await response.json();
            console.log('‚úÖ Fournisseur ajout√© via API:', result.data);
            
            // Fermer la modal et recharger les donn√©es
            document.querySelector('.modal-overlay').remove();
            await loadSuppliersData();
            
            alert('Fournisseur ajout√© avec succ√®s !');
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'ajout du fournisseur:', error);
            console.log('üîÑ Passage en mode mock');
            addMockSupplier(form);
        }
    }

    function addMockSupplier(form) {
        const formData = new FormData(form);
        const newSupplier = {
            _id: 'mock' + Date.now(),
            name: formData.get('name'),
            contact: formData.get('contact'),
            email: formData.get('email'),
            phone: formData.get('phone'),
            categories: Array.from(formData.getAll('categories')),
            notes: formData.get('notes')
        };

        suppliersData.push(newSupplier);
        console.log('üì¶ Fournisseur ajout√© en mode mock:', newSupplier);
        
        // Fermer la modal et recharger l'affichage
        document.querySelector('.modal-overlay').remove();
        renderSuppliersList();
        
        alert('Fournisseur ajout√© en mode local ! (Les donn√©es ne seront pas sauvegard√©es)');
    }
    
    // Fonctions globales pour le stock et les fournisseurs
    window.editStockItem = async function(id) {
        try {
            // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
            if (!token) {
                console.log('üîÑ Mode mock: modification locale');
                editMockStockItem(id);
                return;
            }

            // R√©cup√©rer les donn√©es de l'article
            const response = await fetch(`/api/stock/${id}`, {
                credentials: 'include', // üç™ Cookie HTTP-Only
                method: 'GET',
                headers: {
                    // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                if (response.status === 401) {
                    console.log('üîÑ Token invalide, passage en mode mock');
                    editMockStockItem(id);
                    return;
                }
                throw new Error('Erreur lors de la r√©cup√©ration de l\'article');
            }

            const result = await response.json();
            const item = result.data;

            // Cr√©er une modal d'√©dition (similaire √† l'ajout)
            showEditStockModal(item);
        } catch (error) {
            console.error('Erreur lors de la r√©cup√©ration de l\'article:', error);
            editMockStockItem(id);
        }
    };

    function editMockStockItem(id) {
        const item = stockData.find(item => item._id === id);
        if (item) {
            showEditStockModal(item);
        }
    }

    function showEditStockModal(item) {
        // Cr√©er une modal d'√©dition similaire √† l'ajout
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content" style="max-width: 600px;">
                <div class="modal-header">
                    <h3>Modifier l'article</h3>
                    <button class="close-modal" onclick="this.closest('.modal-overlay').remove()">&times;</button>
                </div>
                <form id="edit-stock-form">
                    <div class="form-group">
                        <label for="edit-stock-name">Nom de l'article *</label>
                        <input type="text" id="edit-stock-name" name="name" class="form-control" value="${item.name}" required oninput="window.autoDetectCategory(this.value)">
                    </div>
                    <div class="form-group">
                        <label for="edit-stock-category">Cat√©gorie *</label>
                        <select id="edit-stock-category" name="category" class="form-control" required>
                            <option value="">-- S√©lectionnez une cat√©gorie --</option>
                            <option value="legumes" ${item.category === 'legumes' ? 'selected' : ''}>L√©gumes</option>
                            <option value="viandes" ${item.category === 'viandes' ? 'selected' : ''}>Viandes</option>
                            <option value="poissons" ${item.category === 'poissons' ? 'selected' : ''}>Poissons</option>
                            <option value="produits-laitiers" ${item.category === 'produits-laitiers' ? 'selected' : ''}>Produits laitiers</option>
                            <option value="cereales" ${item.category === 'cereales' ? 'selected' : ''}>C√©r√©ales</option>
                            <option value="epices" ${item.category === 'epices' ? 'selected' : ''}>√âpices</option>
                            <option value="boissons" ${item.category === 'boissons' ? 'selected' : ''}>Boissons</option>
                            <option value="fruits" ${item.category === 'fruits' ? 'selected' : ''}>Fruits</option>
                            <option value="autres" ${item.category === 'autres' ? 'selected' : ''}>Autres</option>
                        </select>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="edit-stock-quantity">Quantit√© *</label>
                            <input type="number" id="edit-stock-quantity" name="quantity" class="form-control" value="${item.quantity}" min="0" step="0.1" required>
                        </div>
                        <div class="form-group">
                            <label for="edit-stock-unit">Unit√© *</label>
                            <select id="edit-stock-unit" name="unit" class="form-control" required>
                                <option value="">-- Unit√© --</option>
                                <option value="kg" ${item.unit === 'kg' ? 'selected' : ''}>kg</option>
                                <option value="g" ${item.unit === 'g' ? 'selected' : ''}>g</option>
                                <option value="L" ${item.unit === 'L' ? 'selected' : ''}>L</option>
                                <option value="ml" ${item.unit === 'ml' ? 'selected' : ''}>ml</option>
                                <option value="pi√®ces" ${item.unit === 'pi√®ces' ? 'selected' : ''}>pi√®ces</option>
                                <option value="bo√Ætes" ${item.unit === 'bo√Ætes' ? 'selected' : ''}>bo√Ætes</option>
                                <option value="sachets" ${item.unit === 'sachets' ? 'selected' : ''}>sachets</option>
                                <option value="bouteilles" ${item.unit === 'bouteilles' ? 'selected' : ''}>bouteilles</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="edit-stock-expiration">Date d'expiration *</label>
                        <input type="date" id="edit-stock-expiration" name="expirationDate" class="form-control" value="${item.expiration || item.expirationDate}" required>
                    </div>
                    <div class="form-group">
                        <label for="edit-stock-supplier">Fournisseur</label>
                        <input type="text" id="edit-stock-supplier" name="supplier" class="form-control" value="${item.supplier || ''}">
                    </div>
                    <div class="form-group">
                        <label for="edit-stock-location">Emplacement</label>
                        <input type="text" id="edit-stock-location" name="location" class="form-control" value="${item.location || ''}">
                    </div>
                    <div class="form-group">
                        <label for="edit-stock-price">Prix (‚Ç¨)</label>
                        <input type="number" id="edit-stock-price" name="price" class="form-control" value="${item.price || 0}" min="0" step="0.01">
                    </div>
                    <div class="form-group">
                        <label for="edit-stock-notes">Notes</label>
                        <textarea id="edit-stock-notes" name="notes" class="form-control" rows="3">${item.notes || ''}</textarea>
                    </div>
                    <div class="modal-actions">
                        <button type="button" class="btn-secondary" onclick="this.closest('.modal-overlay').remove()">Annuler</button>
                        <button type="submit" class="btn-primary">Modifier l'article</button>
                    </div>
                </form>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // G√©rer la soumission du formulaire
        document.getElementById('edit-stock-form').addEventListener('submit', async (e) => {
                e.preventDefault();
            await updateStockItem(item._id, e.target);
        });
    }

    async function updateStockItem(id, form) {
        try {
            // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
            if (!token) {
                console.log('üîÑ Mode mock: modification locale');
                updateMockStockItem(id, form);
                return;
            }

            const formData = new FormData(form);
            const stockData = {
                name: formData.get('name'),
                category: formData.get('category'),
                quantity: parseFloat(formData.get('quantity')),
                unit: formData.get('unit'),
                expirationDate: formData.get('expirationDate'),
                supplier: formData.get('supplier'),
                location: formData.get('location'),
                price: parseFloat(formData.get('price')) || 0,
                notes: formData.get('notes')
            };

            const response = await fetch(`/api/stock/${id}`, {
                credentials: 'include', // üç™ Cookie HTTP-Only
                method: 'PUT',
                headers: {
                    // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
'Content-Type': 'application/json'
                },
                body: JSON.stringify(stockData)
            });

            if (!response.ok) {
                if (response.status === 401) {
                    console.log('üîÑ Token invalide, passage en mode mock');
                    updateMockStockItem(id, form);
                    return;
                }
                const error = await response.json();
                throw new Error(error.message || 'Erreur lors de la modification de l\'article');
            }

            console.log('‚úÖ Article modifi√© via API');
            document.querySelector('.modal-overlay').remove();
            await loadStockData();
            alert('Article modifi√© avec succ√®s !');
        } catch (error) {
            console.error('‚ùå Erreur lors de la modification de l\'article:', error);
            updateMockStockItem(id, form);
        }
    }

    function updateMockStockItem(id, form) {
        const formData = new FormData(form);
        const itemIndex = stockData.findIndex(item => item._id === id);
        
        if (itemIndex !== -1) {
            stockData[itemIndex] = {
                ...stockData[itemIndex],
                name: formData.get('name'),
                category: formData.get('category'),
                quantity: parseFloat(formData.get('quantity')),
                unit: formData.get('unit'),
                expiration: formData.get('expirationDate'),
                supplier: formData.get('supplier'),
                location: formData.get('location'),
                price: parseFloat(formData.get('price')) || 0,
                notes: formData.get('notes')
            };
            
            console.log('üì¶ Article modifi√© en mode mock:', stockData[itemIndex]);
            document.querySelector('.modal-overlay').remove();
            renderStockTable();
            alert('Article modifi√© en mode local !');
        }
    }
    
    window.deleteStockItem = async function(id) {
        if (!confirm('√ätes-vous s√ªr de vouloir supprimer cet article ?')) {
            return;
        }

        try {
            // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
            if (!token) {
                console.log('üîÑ Mode mock: suppression locale');
                deleteMockStockItem(id);
                return;
            }

            const response = await fetch(`/api/stock/${id}`, {
                credentials: 'include', // üç™ Cookie HTTP-Only
                method: 'DELETE',
                headers: {
                    // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                if (response.status === 401) {
                    console.log('üîÑ Token invalide, passage en mode mock');
                    deleteMockStockItem(id);
                    return;
                }
                const error = await response.json();
                throw new Error(error.message || 'Erreur lors de la suppression de l\'article');
            }

            console.log('‚úÖ Article supprim√© via API');
            await loadStockData();
            alert('Article supprim√© avec succ√®s !');
        } catch (error) {
            console.error('‚ùå Erreur lors de la suppression de l\'article:', error);
            deleteMockStockItem(id);
        }
    };

    function deleteMockStockItem(id) {
        stockData = stockData.filter(item => item._id !== id);
        console.log('üì¶ Article supprim√© en mode mock:', id);
        renderStockTable();
        alert('Article supprim√© en mode local !');
    }
    
    window.openSupplierDashboard = function(id) {
        // Redirection vers le dashboard fournisseur
        window.open(`supplier-dashboard.html?supplier=${id}`, '_blank');
    };
    
    window.editSupplier = async function(id) {
        try {
            // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
            if (!token) {
                alert('Token d\'authentification manquant');
                return;
            }

            // R√©cup√©rer les donn√©es du fournisseur
            const response = await fetch(`/api/suppliers/${id}`, {
                credentials: 'include', // üç™ Cookie HTTP-Only
                method: 'GET',
                headers: {
                    // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error('Erreur lors de la r√©cup√©ration du fournisseur');
            }

            const result = await response.json();
            const supplier = result.data;

            // Cr√©er une modal d'√©dition
            const modal = document.createElement('div');
            modal.className = 'modal-overlay';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Modifier le fournisseur</h3>
                        <button class="close-modal" onclick="this.closest('.modal-overlay').remove()">&times;</button>
                    </div>
                    <form id="edit-supplier-form">
                        <div class="form-group">
                            <label for="edit-supplier-name">Nom du fournisseur *</label>
                            <input type="text" id="edit-supplier-name" name="name" class="form-control" value="${supplier.name}" required>
                        </div>
                        <div class="form-group">
                            <label for="edit-supplier-contact">Contact *</label>
                            <input type="text" id="edit-supplier-contact" name="contact" class="form-control" value="${supplier.contact}" required>
                        </div>
                        <div class="form-group">
                            <label for="edit-supplier-email">Email *</label>
                            <input type="email" id="edit-supplier-email" name="email" class="form-control" value="${supplier.email}" required>
                        </div>
                        <div class="form-group">
                            <label for="edit-supplier-phone">T√©l√©phone *</label>
                            <input type="tel" id="edit-supplier-phone" name="phone" class="form-control" value="${supplier.phone}" required>
                        </div>
                        <div class="form-group">
                            <label for="edit-supplier-categories">Cat√©gories</label>
                            <select id="edit-supplier-categories" name="categories" class="form-control" multiple>
                                <option value="legumes" ${supplier.categories.includes('legumes') ? 'selected' : ''}>L√©gumes</option>
                                <option value="viandes" ${supplier.categories.includes('viandes') ? 'selected' : ''}>Viandes</option>
                                <option value="poissons" ${supplier.categories.includes('poissons') ? 'selected' : ''}>Poissons</option>
                                <option value="produits-laitiers" ${supplier.categories.includes('produits-laitiers') ? 'selected' : ''}>Produits laitiers</option>
                                <option value="cereales" ${supplier.categories.includes('cereales') ? 'selected' : ''}>C√©r√©ales</option>
                                <option value="epices" ${supplier.categories.includes('epices') ? 'selected' : ''}>√âpices</option>
                                <option value="boissons" ${supplier.categories.includes('boissons') ? 'selected' : ''}>Boissons</option>
                                <option value="autres" ${supplier.categories.includes('autres') ? 'selected' : ''}>Autres</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="edit-supplier-notes">Notes</label>
                            <textarea id="edit-supplier-notes" name="notes" class="form-control" rows="3">${supplier.notes || ''}</textarea>
                        </div>
                        <div class="modal-actions">
                            <button type="button" class="btn-secondary" onclick="this.closest('.modal-overlay').remove()">Annuler</button>
                            <button type="submit" class="btn-primary">Modifier</button>
                        </div>
                    </form>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // G√©rer la soumission du formulaire
            document.getElementById('edit-supplier-form').addEventListener('submit', async (e) => {
                e.preventDefault();
                await updateSupplier(id, e.target);
            });
        } catch (error) {
            console.error('Erreur lors de la r√©cup√©ration du fournisseur:', error);
            alert('Erreur: ' + error.message);
        }
    };

    async function updateSupplier(id, form) {
        try {
            // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
            if (!token) {
                alert('Token d\'authentification manquant');
                return;
            }

            const formData = new FormData(form);
            const supplierData = {
                name: formData.get('name'),
                contact: formData.get('contact'),
                email: formData.get('email'),
                phone: formData.get('phone'),
                categories: Array.from(formData.getAll('categories')),
                notes: formData.get('notes')
            };

            const response = await fetch(`/api/suppliers/${id}`, {
                credentials: 'include', // üç™ Cookie HTTP-Only
                method: 'PUT',
                headers: {
                    // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
'Content-Type': 'application/json'
                },
                body: JSON.stringify(supplierData)
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Erreur lors de la modification du fournisseur');
            }

            const result = await response.json();
            console.log('Fournisseur modifi√©:', result.data);
            
            // Fermer la modal et recharger les donn√©es
            document.querySelector('.modal-overlay').remove();
            await loadSuppliersData();
            
            alert('Fournisseur modifi√© avec succ√®s !');
        } catch (error) {
            console.error('Erreur lors de la modification du fournisseur:', error);
            alert('Erreur: ' + error.message);
        }
    }

    window.deleteSupplier = async function(id) {
        if (!confirm('√ätes-vous s√ªr de vouloir supprimer ce fournisseur ?')) {
            return;
        }

        try {
            // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
            if (!token) {
                console.log('üîÑ Mode mock: suppression locale');
                deleteMockSupplier(id);
                return;
            }

            const response = await fetch(`/api/suppliers/${id}`, {
                credentials: 'include', // üç™ Cookie HTTP-Only
                method: 'DELETE',
                headers: {
                    // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                if (response.status === 401) {
                    console.log('üîÑ Token invalide, passage en mode mock');
                    deleteMockSupplier(id);
                    return;
                }
                const error = await response.json();
                throw new Error(error.message || 'Erreur lors de la suppression du fournisseur');
            }

            console.log('‚úÖ Fournisseur supprim√© via API');
            await loadSuppliersData();
            alert('Fournisseur supprim√© avec succ√®s !');
        } catch (error) {
            console.error('‚ùå Erreur lors de la suppression du fournisseur:', error);
            console.log('üîÑ Passage en mode mock');
            deleteMockSupplier(id);
        }
    };

    function deleteMockSupplier(id) {
        suppliersData = suppliersData.filter(supplier => supplier._id !== id);
        console.log('üì¶ Fournisseur supprim√© en mode mock:', id);
        renderSuppliersList();
        alert('Fournisseur supprim√© en mode local !');
    }

    // Variable pour stocker l'ID du fournisseur actuel
    let currentSupplierId = null;

    // Fonction pour consulter le catalogue d'un fournisseur
    window.browseSupplierProducts = async function(supplierId, supplierName) {
        console.log('üõí Consultation du catalogue du fournisseur:', supplierName);
        
        // Stocker l'ID du fournisseur pour les commandes
        currentSupplierId = supplierId;
        
        try {
            // Charger les produits du fournisseur
            const response = await fetch(`/api/products/supplier/${supplierId}`, {
                credentials: 'include', // üç™ Cookie HTTP-Only
                headers: {
                    // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
}
            });
            
            let products = [];
            if (response.ok) {
                products = await response.json();
            } else {
                // Fallback avec des donn√©es mock√©es
                products = getMockProductsForSupplier(supplierId);
            }
            
            showSupplierCatalogModal(supplierName, products);
            
        } catch (error) {
            console.error('‚ùå Erreur lors du chargement du catalogue:', error);
            // Utiliser des donn√©es mock√©es en cas d'erreur
            const mockProducts = getMockProductsForSupplier(supplierId);
            showSupplierCatalogModal(supplierName, mockProducts);
        }
    };

    // Fonction pour r√©cup√©rer l'ID du fournisseur actuel
    function getCurrentSupplierId() {
        return currentSupplierId;
    }

    // Donn√©es mock√©es pour les produits des fournisseurs
    function getMockProductsForSupplier(supplierId) {
        const mockProducts = {
            'mock1': [ // Fruits & L√©gumes SA
                { _id: 'p1', name: 'Tomates cerises', category: 'fruits-legumes', price: 3.50, unit: 'kg', deliveryTime: 1, minOrder: 5, description: 'Tomates cerises bio de saison', promo: 0, saveProduct: false },
                { _id: 'p2', name: 'Carottes bio', category: 'fruits-legumes', price: 2.20, unit: 'kg', deliveryTime: 1, minOrder: 10, description: 'Carottes biologiques fra√Æches', promo: 10, saveProduct: false },
                { _id: 'p3', name: 'Pommes Golden', category: 'fruits-legumes', price: 2.80, unit: 'kg', deliveryTime: 2, minOrder: 5, description: 'Pommes Golden du Val de Loire', promo: 0, saveProduct: true }
            ],
            'mock2': [ // Boucherie Martin
                { _id: 'p4', name: 'Filet de b≈ìuf', category: 'viandes', price: 28.50, unit: 'kg', deliveryTime: 1, minOrder: 2, description: 'Filet de b≈ìuf Charolais', promo: 0, saveProduct: false },
                { _id: 'p5', name: 'C√¥telettes d\'agneau', category: 'viandes', price: 18.90, unit: 'kg', deliveryTime: 1, minOrder: 3, description: 'C√¥telettes d\'agneau de pr√©-sal√©', promo: 15, saveProduct: false }
            ],
            'mock3': [ // Poissonnerie du Port
                { _id: 'p6', name: 'Saumon frais', category: 'poissons', price: 24.90, unit: 'kg', deliveryTime: 1, minOrder: 2, description: 'Saumon frais du jour', promo: 0, saveProduct: false },
                { _id: 'p7', name: 'Cabillaud', category: 'poissons', price: 19.50, unit: 'kg', deliveryTime: 1, minOrder: 3, description: 'Cabillaud frais de la mer du Nord', promo: 0, saveProduct: false }
            ],
            'mock4': [ // Produits Laitiers Bio
                { _id: 'p8', name: 'Lait bio 1L', category: 'produits-laitiers', price: 1.20, unit: 'litre', deliveryTime: 1, minOrder: 20, description: 'Lait biologique pasteuris√©', promo: 0, saveProduct: false },
                { _id: 'p9', name: 'Fromage de ch√®vre', category: 'produits-laitiers', price: 8.50, unit: 'pi√®ce', deliveryTime: 2, minOrder: 5, description: 'Fromage de ch√®vre artisanal', promo: 0, saveProduct: true }
            ],
            'mock5': [ // √âpicerie Fine
                { _id: 'p10', name: 'Riz basmati', category: 'epicerie', price: 4.20, unit: 'kg', deliveryTime: 3, minOrder: 10, description: 'Riz basmati premium', promo: 0, saveProduct: false },
                { _id: 'p11', name: '√âpices m√©lange', category: 'epicerie', price: 12.90, unit: 'sachet', deliveryTime: 2, minOrder: 5, description: 'M√©lange d\'√©pices m√©diterran√©ennes', promo: 20, saveProduct: false }
            ]
        };
        
        return mockProducts[supplierId] || [];
    }

    // Modal pour afficher le catalogue d'un fournisseur
    function showSupplierCatalogModal(supplierName, products) {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content catalog-modal">
                <div class="modal-header">
                    <h2><i class="fas fa-shopping-cart"></i> Catalogue - ${supplierName}</h2>
                    <button class="modal-close" onclick="this.closest('.modal-overlay').remove()">&times;</button>
                </div>
                
                <div class="catalog-filters">
                    <div class="form-group">
                        <label>Rechercher un produit :</label>
                        <input type="text" id="product-search" placeholder="Nom du produit..." class="form-control">
                    </div>
                    <div class="form-group">
                        <label>Cat√©gorie :</label>
                        <select id="category-filter" class="form-control">
                            <option value="">Toutes les cat√©gories</option>
                            <option value="fruits-legumes">Fruits et L√©gumes</option>
                            <option value="viandes">Viandes</option>
                            <option value="poissons">Poissons</option>
                            <option value="epicerie">√âpicerie</option>
                            <option value="produits-laitiers">Produits Laitiers</option>
                            <option value="boissons">Boissons</option>
                            <option value="autres">Autres</option>
                        </select>
                    </div>
                </div>
                
                <div class="products-catalog" id="products-catalog">
                    ${renderProductsCatalog(products)}
                </div>
                
                <div class="modal-actions">
                    <button type="button" class="btn-secondary" onclick="this.closest('.modal-overlay').remove()">Fermer</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Ajouter les √©couteurs d'√©v√©nements pour les filtres
        const searchInput = document.getElementById('product-search');
        const categoryFilter = document.getElementById('category-filter');
        
        const filterProducts = () => {
            const searchTerm = searchInput.value.toLowerCase();
            const selectedCategory = categoryFilter.value;
            
            const filteredProducts = products.filter(product => {
                const matchesSearch = product.name.toLowerCase().includes(searchTerm);
                const matchesCategory = !selectedCategory || product.category === selectedCategory;
                return matchesSearch && matchesCategory;
            });
            
            document.getElementById('products-catalog').innerHTML = renderProductsCatalog(filteredProducts);
        };
        
        searchInput.addEventListener('input', filterProducts);
        categoryFilter.addEventListener('change', filterProducts);
    }

    // Rendu du catalogue de produits
    function renderProductsCatalog(products) {
        if (products.length === 0) {
            return `
                <div class="empty-catalog">
                    <i class="fas fa-box-open"></i>
                    <h3>Aucun produit trouv√©</h3>
                    <p>Ce fournisseur n'a pas encore de produits en vente.</p>
                </div>
            `;
        }
        
        return `
            <div class="products-grid">
                ${products.map(product => {
                    const finalPrice = product.promo > 0 ? 
                        (product.price * (1 - product.promo / 100)).toFixed(2) : 
                        product.price;
                    
                    const promoBadge = product.promo > 0 ? 
                        `<span class="promo-badge">-${product.promo}%</span>` : '';
                    
                    const saveBadge = product.saveProduct ? 
                        `<span class="save-badge">Produit √† sauver</span>` : '';
                    
                    const priceDisplay = product.promo > 0 ? 
                        `<span class="original-price">${product.price}‚Ç¨</span> <span class="promo-price">${finalPrice}‚Ç¨</span>` :
                        `${product.price}‚Ç¨`;
                    
                    return `
                        <div class="product-card">
                            <div class="product-header">
                                <h3>${product.name}</h3>
                                <div class="product-badges">
                                    ${promoBadge}
                                    ${saveBadge}
                                </div>
                            </div>
                            
                            <div class="product-info">
                                <p><strong>Cat√©gorie:</strong> ${product.category}</p>
                                <p><strong>Prix:</strong> ${priceDisplay}/${product.unit}</p>
                                <p><strong>D√©lai de livraison:</strong> ${product.deliveryTime} jour(s)</p>
                                <p><strong>Commande minimum:</strong> ${product.minOrder} ${product.unit}</p>
                                ${product.description ? `<p><strong>Description:</strong> ${product.description}</p>` : ''}
                            </div>
                            
                            <div class="product-actions">
                                <button class="btn-primary" onclick="orderProduct('${product._id}', '${product.name}', ${product.price}, '${product.unit}', ${product.minOrder})">
                                    <i class="fas fa-shopping-cart"></i> Commander
                                </button>
                            </div>
                        </div>
                    `;
                }).join('')}
            </div>
        `;
    }

    // Fonction pour passer une commande
    window.orderProduct = function(productId, productName, price, unit, minOrder) {
        console.log('üõí Commande de produit:', productName);
        
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content order-modal">
                <div class="modal-header">
                    <h2><i class="fas fa-shopping-cart"></i> Commander ${productName}</h2>
                    <button class="modal-close" onclick="this.closest('.modal-overlay').remove()">&times;</button>
                </div>
                
                <form id="order-form">
                    <div class="form-group">
                        <label>Quantit√© souhait√©e (${unit}) :</label>
                        <input type="number" id="order-quantity" class="form-control" min="${minOrder}" value="${minOrder}" required>
                        <small>Commande minimum: ${minOrder} ${unit}</small>
                    </div>
                    
                    <div class="form-group">
                        <label>Date de livraison souhait√©e :</label>
                        <input type="date" id="delivery-date" class="form-control" required>
                    </div>
                    
                    <div class="form-group">
                        <label>Notes pour le fournisseur :</label>
                        <textarea id="order-notes" class="form-control" rows="3" placeholder="Instructions sp√©ciales, pr√©f√©rences..."></textarea>
                    </div>
                    
                    <div class="order-summary">
                        <h3>R√©sum√© de la commande</h3>
                        <p><strong>Produit:</strong> ${productName}</p>
                        <p><strong>Prix unitaire:</strong> ${price}‚Ç¨/${unit}</p>
                        <p><strong>Quantit√©:</strong> <span id="summary-quantity">${minOrder}</span> ${unit}</p>
                        <p><strong>Total:</strong> <span id="summary-total">${(price * minOrder).toFixed(2)}</span>‚Ç¨</p>
                    </div>
                    
                    <div class="modal-actions">
                        <button type="button" class="btn-secondary" onclick="this.closest('.modal-overlay').remove()">Annuler</button>
                        <button type="button" class="btn-success" onclick="addToCart('${productId}', '${productName}', ${price}, '${unit}', ${minOrder})" style="background: #27ae60;">
                            <i class="fas fa-cart-plus"></i> Ajouter au panier
                        </button>
                        <button type="submit" class="btn-primary">
                            <i class="fas fa-check"></i> Commander maintenant
                        </button>
                    </div>
                </form>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // D√©finir la date de livraison par d√©faut (dans 3 jours)
        const deliveryDate = new Date();
        deliveryDate.setDate(deliveryDate.getDate() + 3);
        document.getElementById('delivery-date').value = deliveryDate.toISOString().split('T')[0];
        
        // Mettre √† jour le r√©sum√© quand la quantit√© change
        const quantityInput = document.getElementById('order-quantity');
        const summaryQuantity = document.getElementById('summary-quantity');
        const summaryTotal = document.getElementById('summary-total');
        
        quantityInput.addEventListener('input', () => {
            const quantity = parseInt(quantityInput.value) || 0;
            summaryQuantity.textContent = quantity;
            summaryTotal.textContent = (price * quantity).toFixed(2);
        });
        
        // G√©rer la soumission de la commande
        document.getElementById('order-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const quantity = parseInt(quantityInput.value);
            const total = price * quantity;
            
            const orderData = {
                supplier: getCurrentSupplierId(), // Fonction √† impl√©menter
                items: [{
                    productId: productId,
                    quantity: quantity
                }],
                deliveryDate: document.getElementById('delivery-date').value,
                notes: document.getElementById('order-notes').value
            };
            
            try {
                // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
                const response = await fetch('/api/orders', {
                    credentials: 'include', // üç™ Cookie HTTP-Only
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
},
                    body: JSON.stringify(orderData)
                });
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('üì¶ Commande cr√©√©e:', result.data);
                    
                    alert(`Commande confirm√©e !\n\nNum√©ro: ${result.data.orderNumber}\nProduit: ${productName}\nQuantit√©: ${quantity} ${unit}\nTotal: ${total.toFixed(2)}‚Ç¨\n\nLe fournisseur recevra votre commande et vous contactera pour confirmer la livraison.`);
                    
                    modal.remove();
                } else {
                    const error = await response.json();
                    throw new Error(error.message || 'Erreur lors de la cr√©ation de la commande');
                }
                
            } catch (error) {
                console.error('‚ùå Erreur lors de la commande:', error);
                alert(`Erreur lors de la cr√©ation de la commande: ${error.message}`);
            }
        });
    };
    
    // Gestion du changement de type d'√©tablissement
    function initEstablishmentTypeHandler() {
        const establishmentSelect = document.getElementById('establishment-type-select');
        if (establishmentSelect) {
            establishmentSelect.addEventListener('change', toggleSpecializedFilters);
            // Appel initial
            toggleSpecializedFilters();
        }
    }
    
    function toggleSpecializedFilters() {
        const establishmentType = document.getElementById('establishment-type-select').value;
        console.log('üîÑ Type d\'√©tablissement s√©lectionn√©:', establishmentType);
        
        // Masquer tous les filtres sp√©cialis√©s
        const ehpadFilters = document.getElementById('ehpad-filters');
        const hospitalFilters = document.getElementById('hospital-filters');
        const elderlyCareFilters = document.getElementById('elderly-care-filters');
        
        if (ehpadFilters) ehpadFilters.style.display = 'none';
        if (hospitalFilters) hospitalFilters.style.display = 'none';
        if (elderlyCareFilters) elderlyCareFilters.style.display = 'none';
        
        // Gestion des groupes d'√¢ges (sp√©cifiques aux cantines scolaires)
        const ageGroupElement = document.querySelector('.age-group');
        const ageGroupsSection = ageGroupElement ? ageGroupElement.closest('.form-group') : null;
        const addGroupBtn = document.getElementById('add-group-btn');
        
        // Masquer les groupes d'√¢ges par d√©faut
        if (ageGroupsSection) {
            ageGroupsSection.style.display = 'none';
        }
        if (addGroupBtn) {
            addGroupBtn.style.display = 'none';
        }
        
        // Afficher les filtres appropri√©s selon le type
        switch(establishmentType) {
            case 'ehpad':
                if (ehpadFilters) {
                    ehpadFilters.style.display = 'block';
                    console.log('‚úÖ Filtres EHPAD affich√©s');
                }
                break;
            case 'hopital':
                if (hospitalFilters) {
                    hospitalFilters.style.display = 'block';
                    console.log('‚úÖ Filtres h√¥pital affich√©s');
                }
                break;
            case 'maison_de_retraite':
                if (elderlyCareFilters) {
                    elderlyCareFilters.style.display = 'block';
                    console.log('‚úÖ Filtres maison de retraite affich√©s');
                }
                break;
            case 'cantine_scolaire':
                // Afficher les groupes d'√¢ges pour les cantines scolaires
                if (ageGroupsSection) {
                    ageGroupsSection.style.display = 'block';
                    console.log('‚úÖ Groupes d\'√¢ges affich√©s pour cantine scolaire');
                }
                if (addGroupBtn) {
                    addGroupBtn.style.display = 'block';
                }
                break;
            case 'cantine_entreprise':
                // Afficher les groupes d'√¢ges pour les cantines d'entreprise
                if (ageGroupsSection) {
                    ageGroupsSection.style.display = 'block';
                    console.log('‚úÖ Groupes d\'√¢ges affich√©s pour cantine d\'entreprise');
                }
                if (addGroupBtn) {
                    addGroupBtn.style.display = 'block';
                }
                break;
            case 'autre':
            default:
                console.log('‚ÑπÔ∏è Aucun filtre sp√©cialis√© pour ce type d\'√©tablissement');
                break;
        }
    }
    
    // Gestion des boutons d'ajout/suppression pour les filtres sp√©cialis√©s
    function initSpecializedFilters() {
        // EHPAD
        setupAddRemoveButtons('ehpad-texture', 'add-ehpad-texture-btn', 'ehpad-texture-container');
        setupAddRemoveButtons('ehpad-mastication', 'add-ehpad-mastication-btn', 'ehpad-mastication-container');
        setupAddRemoveButtons('ehpad-deglutition', 'add-ehpad-deglutition-btn', 'ehpad-deglutition-container');
        
        // H√¥pital
        setupAddRemoveButtons('hospital-texture', 'add-hospital-texture-btn', 'hospital-texture-container');
        setupAddRemoveButtons('hospital-diet', 'add-hospital-diet-btn', 'hospital-diet-container');
        
        // Maison de retraite
        setupAddRemoveButtons('texture', 'add-texture-btn', 'texture-container');
        setupAddRemoveButtons('mastication', 'add-mastication-btn', 'mastication-container');
    }
    
    function setupAddRemoveButtons(type, addButtonId, containerId) {
        const addButton = document.getElementById(addButtonId);
        const container = document.getElementById(containerId);
        
        if (addButton && container) {
            addButton.addEventListener('click', (e) => {
                e.preventDefault();
                console.log(`‚ûï Ajout d'un √©l√©ment ${type}`);
                const newItem = createFilterItem(type);
                container.appendChild(newItem);
            });
        }
    }
    
    function createFilterItem(type) {
        const newItem = document.createElement('div');
        newItem.className = 'restriction-item';
        
        let selectOptions = '';
        let removeClass = '';
        let nameAttribute = '';
        let ariaLabel = '';
        
        switch(type) {
            case 'ehpad-texture':
                selectOptions = `
                    <option value="TX_SOLID_7">Normal [TX_SOLID_7]</option>
                    <option value="TX_SOLID_6A">Tendre / Facile √† m√¢cher (viandes/garni tr√®s tendres) [TX_SOLID_6A]</option>
                    <option value="TX_SOLID_6">Hach√© & Humide (morceaux ‚â§ 1 cm, li√©s avec sauce) [TX_SOLID_6]</option>
                    <option value="TX_SOLID_5A">Moulin√© / √âminc√© fin (morceaux ‚â§ 4 mm, pas secs, sans fils ni peau) [TX_SOLID_5A]</option>
                    <option value="TX_SOLID_5B">Hach√© tr√®s fin & Li√© (‚â§ 2 mm, forme p√¢teuse) [TX_SOLID_5B]</option>
                    <option value="TX_SOLID_4">Mix√© lisse / Pur√©e (texture homog√®ne, tient sur la cuill√®re) [TX_SOLID_4]</option>
                `;
                removeClass = 'remove-ehpad-texture-btn';
                nameAttribute = 'ehpad-texture-level';
                ariaLabel = 'Niveau de texture IDDSI';
                break;
            case 'ehpad-mastication':
                selectOptions = `
                    <option value="MAST_FULL">Aucune difficult√© [MAST_FULL]</option>
                    <option value="MAST_PARTIAL">Partielle / Proth√®se stable (√©viter cro√ªtes dures) [MAST_PARTIAL]</option>
                    <option value="MAST_UNSTABLE">Proth√®se instable / Douleurs (tendre, hach√©) [MAST_UNSTABLE]</option>
                    <option value="MAST_NONE">√âdentation / Incapacit√© √† m√¢cher (moulin√©/mix√©) [MAST_NONE]</option>
                `;
                removeClass = 'remove-ehpad-mastication-btn';
                nameAttribute = 'ehpad-mastication-level';
                ariaLabel = 'Niveau de mastication';
                break;
            case 'ehpad-deglutition':
                selectOptions = `
                    <option value="IDL_0">Liquide mince (eau, caf√©‚Ä¶) [IDL_0]</option>
                    <option value="IDL_1">L√©g√®rement √©paissi (nectar) [IDL_1]</option>
                    <option value="IDL_2">Mod√©r√©ment √©paissi (miel) [IDL_2]</option>
                    <option value="IDL_3">Fortement √©paissi (pudding) [IDL_3]</option>
                    <option value="IDL_GEL">Eau g√©lifi√©e [IDL_GEL]</option>
                `;
                removeClass = 'remove-ehpad-deglutition-btn';
                nameAttribute = 'ehpad-deglutition-level';
                ariaLabel = 'Niveau de d√©glutition IDDSI';
                break;
            case 'hospital-texture':
                selectOptions = `
                    <option value="TEXTURE_NORMAL">Normal</option>
                    <option value="TEXTURE_TENDER">Tendre / Facile √† m√¢cher</option>
                    <option value="TEXTURE_CHOPPED">Hach√© & Humide</option>
                    <option value="TEXTURE_PUREED">Mix√© homog√®ne</option>
                    <option value="TEXTURE_LIQUID_THICK">Liquide √©paissi (nectar, miel, pudding)</option>
                `;
                removeClass = 'remove-hospital-texture-btn';
                nameAttribute = 'hospital-texture-level';
                ariaLabel = 'Niveau de texture';
                break;
            case 'hospital-diet':
                selectOptions = `
                    <option value="DIABETIC_45">Diab√©tique (45g glucides/repas)</option>
                    <option value="DIABETIC_60">Diab√©tique (60g glucides/repas)</option>
                    <option value="DIABETIC_75">Diab√©tique (75g glucides/repas)</option>
                    <option value="HYPOSODIC_5G">Hyposod√© (5g sel/j)</option>
                    <option value="HYPOSODIC_2G">Hyposod√© (2g sel/j)</option>
                    <option value="HYPOSODIC_NONE">Sans sel ajout√©</option>
                    <option value="RENAL_LOW_K">IRC - Pauvre en potassium</option>
                    <option value="RENAL_LOW_P">IRC - Pauvre en phosphore</option>
                    <option value="RENAL_LOW_PROT">IRC - Pauvre en prot√©ines</option>
                    <option value="LIVER_LOW_PROT">H√©patique - Restriction prot√©ique</option>
                    <option value="LIVER_LOW_NA">H√©patique - Pauvre en sodium</option>
                    <option value="LIVER_LOW_FAT">H√©patique - Limitation graisses</option>
                    <option value="CANCER_HIGH_CAL">Cancer - Hypercalorique</option>
                    <option value="CANCER_HIGH_PROT">Cancer - Hyperprot√©in√©</option>
                    <option value="POST_SURG_LIQUID">Post-chirurgie - Liquide clair</option>
                    <option value="POST_SURG_FULL_LIQUID">Post-chirurgie - Liquide complet</option>
                    <option value="POST_SURG_PUREED">Post-chirurgie - Mix√©</option>
                    <option value="NO_RESIDUE">Sans r√©sidu (pr√©-examens)</option>
                    <option value="HIGH_FIBER">Riche en fibres</option>
                    <option value="HYPOCALORIC">Hypocalorique</option>
                    <option value="HYPERPROTEIN">Hyperprot√©in√©</option>
                    <option value="HYPERCALORIC">Hypercalorique</option>
                    <option value="NO_ADDED_SUGAR">Sans sucres ajout√©s</option>
                `;
                removeClass = 'remove-hospital-diet-btn';
                nameAttribute = 'hospital-diet-type';
                ariaLabel = 'Type de r√©gime th√©rapeutique';
                break;
            case 'texture':
                selectOptions = `
                    <option value="TX_SOLID_7">Normal [TX_SOLID_7]</option>
                    <option value="TX_SOLID_6A">Tendre / Facile √† m√¢cher [TX_SOLID_6A]</option>
                    <option value="TX_SOLID_6">Hach√© & Humide (‚â§ 1 cm) [TX_SOLID_6]</option>
                    <option value="TX_SOLID_5A">Moulin√© / √âminc√© fin (‚â§ 4 mm) [TX_SOLID_5A]</option>
                    <option value="TX_SOLID_5B">Hach√© tr√®s fin & Li√© (‚â§ 2 mm) [TX_SOLID_5B]</option>
                    <option value="TX_SOLID_4">Mix√© lisse / Pur√©e [TX_SOLID_4]</option>
                `;
                removeClass = 'remove-texture-btn';
                nameAttribute = 'texture-level';
                ariaLabel = 'Niveau de texture';
                break;
            case 'mastication':
                selectOptions = `
                    <option value="MAST_FULL">Aucune difficult√© [MAST_FULL]</option>
                    <option value="MAST_PARTIAL">Partielle / Proth√®se stable [MAST_PARTIAL]</option>
                    <option value="MAST_UNSTABLE">Proth√®se instable / Douleurs [MAST_UNSTABLE]</option>
                    <option value="MAST_NONE">√âdentation / Incapacit√© √† m√¢cher [MAST_NONE]</option>
                `;
                removeClass = 'remove-mastication-btn';
                nameAttribute = 'mastication-level';
                ariaLabel = 'Niveau de mastication';
                break;
        }
        
        newItem.innerHTML = `
            <select class="form-control" name="${nameAttribute}" aria-label="${ariaLabel}">${selectOptions}</select>
            <input type="number" class="form-control" name="${nameAttribute.replace('-level', '-count').replace('-type', '-count')}" min="1" placeholder="Nb. de pers." aria-label="Nombre de personnes">
            <button type="button" class="${removeClass}" style="background:none; color:#e74c3c; padding:0 5px;" aria-label="Supprimer">&times;</button>
        `;
        
        return newItem;
    }
    
    // Gestion des suppressions par d√©l√©gation d'√©v√©nements
    function initRemoveButtons() {
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('remove-ehpad-texture-btn') || 
                e.target.classList.contains('remove-ehpad-mastication-btn') ||
                e.target.classList.contains('remove-ehpad-deglutition-btn') ||
                e.target.classList.contains('remove-hospital-texture-btn') ||
                e.target.classList.contains('remove-hospital-diet-btn') ||
                e.target.classList.contains('remove-texture-btn') ||
                e.target.classList.contains('remove-mastication-btn')) {
                e.target.closest('.restriction-item').remove();
            }
        });
    }
    
    // Gestion du formulaire de g√©n√©ration de menu
    function initMenuForm() {
        const form = document.getElementById('collectivite-menu-form');
        if (form) {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                // Collecter les donn√©es des groupes d'√¢ges
                const groups = [];
                const groupElements = document.querySelectorAll('.age-group');
                
                groupElements.forEach((group, index) => {
                    const ageRange = group.querySelector('select[name*="age-range"]').value;
                    const count = parseInt(group.querySelector('input[name*="count"]').value) || 0;
                    
                    // Collecter les restrictions
                    const restrictions = [];
                    const restrictionItems = group.querySelectorAll('.restriction-item');
                    
                    restrictionItems.forEach(item => {
                        const type = item.querySelector('select[name*="restriction-type"]').value;
                        const restrictionCount = parseInt(item.querySelector('input[name*="restriction-count"]').value) || 0;
                        
                        if (type && restrictionCount > 0) {
                            restrictions.push({ type, count: restrictionCount });
                        }
                    });
                    
                    groups.push({
                        ageRange,
                        count,
                        restrictions
                    });
                });
                
        const payload = {
                    establishmentType: document.getElementById('establishment-type-select').value,
                    groups,
                    totalServings: parseInt(document.getElementById('total-servings').value) || 0,
                    dishesToPrepare: parseInt(document.getElementById('dishes-to-prepare').value) || 3
                };
                
                console.log('Payload pour g√©n√©ration de menu:', payload);
        
        // Appel API pour g√©n√©rer le menu
        try {
                    const token = getToken();
            if (!token) {
                throw new Error('Token d\'authentification manquant');
            }

            const response = await fetch('/api/menus/generate-collectivite', {
                credentials: 'include', // üç™ Cookie HTTP-Only
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
},
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Erreur lors de la g√©n√©ration du menu');
            }

            const result = await response.json();
            console.log('Menu g√©n√©r√©:', result);
            
            // Afficher le r√©sultat
            if (result.success && result.menus) {
                displayGeneratedMenus(result.menus, result.metadata);
            } else {
                alert('Menu g√©n√©r√© avec succ√®s !');
            }
            
        } catch (error) {
            console.error('Erreur:', error);
            alert('Erreur lors de la g√©n√©ration du menu: ' + error.message);
        }
    });
        }
    }

// Fonction pour afficher les menus g√©n√©r√©s
function displayGeneratedMenus(menus, metadata) {
        const resultsContainer = document.getElementById('resultat-menu');
    
    let html = `
        <div class="menu-results">
            <h3>Menus g√©n√©r√©s pour ${metadata.establishmentType} (${metadata.totalPeople} personnes)</h3>
            <div class="menus-grid">
    `;
    
    menus.forEach((menu, index) => {
        html += `
                <div class="menu-suggestion-card">
                <h4>${menu.nom}</h4>
                <p class="menu-description">${menu.description}</p>
                <p class="menu-servings">Pour ${menu.personnes} personnes</p>
                
                <div class="ingredients-section">
                    <h5>Ingr√©dients n√©cessaires :</h5>
                    <ul>
                        ${menu.ingredients_necessaires.map(ing => 
                            `<li>${ing.quantite_ingredient} de ${ing.nom_ingredient}</li>`
                        ).join('')}
                    </ul>
                </div>
                
                <div class="preparation-section">
                    <h5>√âtapes de pr√©paration :</h5>
                    <ol>
                        ${menu.etapes_preparation.map(step => `<li>${step}</li>`).join('')}
                    </ol>
                </div>
                
                ${menu.considerations_nutritionnelles ? `
                    <div class="nutrition-section">
                        <h5>Consid√©rations nutritionnelles :</h5>
                        <p>${menu.considerations_nutritionnelles}</p>
                    </div>
                ` : ''}
                
                <div class="menu-actions">
                    <button class="btn btn-primary" onclick="useMenu(${index})">Utiliser ce menu</button>
                    <button class="btn btn-secondary" onclick="saveMenu(${index})">Sauvegarder</button>
                </div>
            </div>
        `;
    });
    
    html += `
            </div>
        </div>
    `;
    
    resultsContainer.innerHTML = html;
    
    // Stocker les menus pour les actions
    window.generatedMenus = menus;
}

    // Initialisation
    initTabs();
    initAgeGroups();
    initStock();
    initSuppliers();
    initMenuForm();
    initEstablishmentTypeHandler();
    initSpecializedFilters();
    initRemoveButtons();
    
    // Charger les donn√©es initiales
    loadStockData();
    loadSuppliersData();
    
    // Appliquer les filtres au chargement de la page
    setTimeout(() => {
        toggleSpecializedFilters();
    }, 100);
    
    // Gestion du bouton de d√©connexion
    const logoutBtn = document.getElementById('logout-btn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', logout);
    }
});

// Fonctions globales pour les menus
window.useMenu = function(menuIndex) {
    const menu = window.generatedMenus[menuIndex];
    if (!menu) return;
    
    // Demander le nombre de convives
    const guests = prompt(`Nombre de convives pour "${menu.nom}" :`, menu.personnes);
    if (!guests || isNaN(guests)) return;
    
    // Calculer les quantit√©s √† d√©duire
    const itemsToDeduct = menu.ingredients_necessaires.map(ingredient => {
        const ratio = parseInt(guests) / menu.personnes;
        const quantity = parseFloat(ingredient.quantite_ingredient) * ratio;
        return {
            name: ingredient.nom_ingredient,
            quantity: quantity,
            unit: ingredient.quantite_ingredient.split(' ').pop() || 'unit√©'
        };
    });
    
    // Appeler l'API de d√©duction
    deductStockItems(itemsToDeduct);
};

window.saveMenu = function(menuIndex) {
    const menu = window.generatedMenus[menuIndex];
    if (!menu) return;
    
    // Appeler l'API de sauvegarde
    // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
    fetch('/api/menus/save', {
        credentials: 'include', // üç™ Cookie HTTP-Only
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
},
        body: JSON.stringify({
            title: menu.nom,
            theme: 'Collectivit√©',
            mode: 'collectivite-generated',
            courses: [menu]
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Menu sauvegard√© avec succ√®s !');
        } else {
            alert('Erreur lors de la sauvegarde');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        alert('Erreur lors de la sauvegarde');
    });
};

// Fonction pour d√©duire les ingr√©dients du stock
async function deductStockItems(itemsToDeduct) {
    try {
        // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
        const response = await fetch('/api/stock/deduct', {
            credentials: 'include', // üç™ Cookie HTTP-Only
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
},
            body: JSON.stringify({ itemsToDeduct })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Erreur lors de la d√©duction du stock');
        }
        
        const result = await response.json();
        alert(`Stock mis √† jour ! ${result.data.deductedItems.length} ingr√©dient(s) d√©duit(s).`);
        
    } catch (error) {
        console.error('Erreur:', error);
        alert('Erreur lors de la d√©duction du stock: ' + error.message);
    }
}

// ========== SYST√àME DE PANIER ==========

window.addToCart = function(productId, productName, price, unit, minOrder) {
    const quantityInput = document.getElementById('order-quantity');
    const quantity = parseInt(quantityInput.value) || minOrder;
    
    // V√©rifier si le produit est d√©j√† dans le panier
    const existingItemIndex = cart.findIndex(item => item.productId === productId);
    
    if (existingItemIndex !== -1) {
        // Augmenter la quantit√©
        cart[existingItemIndex].quantity += quantity;
        cart[existingItemIndex].total = cart[existingItemIndex].price * cart[existingItemIndex].quantity;
    } else {
        // Ajouter au panier
        cart.push({
            productId,
            productName,
            price,
            unit,
            quantity,
            supplierId: currentSupplierId,
            supplierName: getCurrentSupplierName(),
            total: price * quantity
        });
    }
    
    updateCartCount();
    alert(`${productName} ajout√© au panier !`);
    
    // Fermer la modal
    const modal = document.querySelector('.modal-overlay');
    if (modal) modal.remove();
};

function getCurrentSupplierName() {
    const supplier = suppliersData.find(s => s._id === currentSupplierId);
    return supplier ? supplier.name : 'Fournisseur';
}

function updateCartCount() {
    const cartCount = document.getElementById('cart-count');
    if (cartCount) {
        const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
        cartCount.textContent = totalItems;
        cartCount.style.display = totalItems > 0 ? 'flex' : 'none';
    }
}

window.showCart = function() {
    if (cart.length === 0) {
        alert('Votre panier est vide');
        return;
    }
    
    // Calculer le total
    const total = cart.reduce((sum, item) => sum + item.total, 0);
    
    // Cr√©er la modal du panier
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.id = 'cart-modal';
    modal.innerHTML = `
        <div class="modal-content order-modal" style="max-width: 900px; max-height: 90vh; overflow-y: auto;">
            <div class="modal-header">
                <h2><i class="fas fa-shopping-cart"></i> Mon Panier</h2>
                <button class="modal-close" onclick="this.closest('.modal-overlay').remove()">&times;</button>
            </div>
            
            <div style="padding: 2rem;">
                <table style="width: 100%; border-collapse: collapse;">
                    <thead>
                        <tr style="border-bottom: 2px solid #ddd;">
                            <th style="text-align: left; padding: 0.75rem;">Produit</th>
                            <th style="text-align: left; padding: 0.75rem;">Fournisseur</th>
                            <th style="text-align: center; padding: 0.75rem;">Quantit√©</th>
                            <th style="text-align: right; padding: 0.75rem;">Prix unitaire</th>
                            <th style="text-align: right; padding: 0.75rem;">Total</th>
                            <th style="text-align: center; padding: 0.75rem;">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${cart.map((item, index) => `
                            <tr style="border-bottom: 1px solid #eee;">
                                <td style="padding: 0.75rem;">${item.productName}</td>
                                <td style="padding: 0.75rem;">${item.supplierName}</td>
                                <td style="text-align: center; padding: 0.75rem;">
                                    <input type="number" 
                                           value="${item.quantity}" 
                                           min="1" 
                                           style="width: 60px; padding: 0.25rem; text-align: center;"
                                           onchange="updateCartItemQuantity(${index}, this.value)">
                                    ${item.unit}
                                </td>
                                <td style="text-align: right; padding: 0.75rem;">${item.price.toFixed(2)}‚Ç¨/${item.unit}</td>
                                <td style="text-align: right; padding: 0.75rem; font-weight: bold;">${item.total.toFixed(2)}‚Ç¨</td>
                                <td style="text-align: center; padding: 0.75rem;">
                                    <button onclick="removeFromCart(${index})" 
                                            style="background: #e74c3c; color: white; border: none; padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer;">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        `).join('')}
                    </tbody>
                    <tfoot>
                        <tr style="border-top: 2px solid #ddd;">
                            <td colspan="4" style="text-align: right; padding: 1rem; font-weight: bold; font-size: 1.2rem;">Total g√©n√©ral:</td>
                            <td style="text-align: right; padding: 1rem; font-weight: bold; font-size: 1.2rem; color: #27ae60;">${total.toFixed(2)}‚Ç¨</td>
                            <td></td>
                        </tr>
                    </tfoot>
                </table>
                
                <div style="margin-top: 2rem;">
                    <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Date de livraison souhait√©e :</label>
                    <input type="date" id="cart-delivery-date" class="form-control" required>
                </div>
                
                <div style="margin-top: 1rem;">
                    <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Notes pour les fournisseurs :</label>
                    <textarea id="cart-notes" class="form-control" rows="3" placeholder="Instructions sp√©ciales..."></textarea>
                </div>
                
                <div class="modal-actions" style="margin-top: 2rem; display: flex; gap: 1rem; justify-content: flex-end;">
                    <button type="button" class="btn-secondary" onclick="clearCart()">
                        <i class="fas fa-trash"></i> Vider le panier
                    </button>
                    <button type="button" class="btn-primary" onclick="checkoutCart()">
                        <i class="fas fa-check"></i> Valider la commande
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // D√©finir la date de livraison par d√©faut (dans 3 jours)
    const deliveryDate = new Date();
    deliveryDate.setDate(deliveryDate.getDate() + 3);
    document.getElementById('cart-delivery-date').value = deliveryDate.toISOString().split('T')[0];
};

window.updateCartItemQuantity = function(index, newQuantity) {
    const quantity = parseInt(newQuantity);
    if (quantity > 0) {
        cart[index].quantity = quantity;
        cart[index].total = cart[index].price * quantity;
        updateCartCount();
        // Recharger la modal du panier
        document.getElementById('cart-modal').remove();
        showCart();
    }
};

window.removeFromCart = function(index) {
    const item = cart[index];
    cart.splice(index, 1);
    updateCartCount();
    alert(`${item.productName} retir√© du panier`);
    
    if (cart.length === 0) {
        document.getElementById('cart-modal').remove();
    } else {
        // Recharger la modal du panier
        document.getElementById('cart-modal').remove();
        showCart();
    }
};

window.clearCart = function() {
    if (confirm('√ätes-vous s√ªr de vouloir vider le panier ?')) {
        cart = [];
        updateCartCount();
        document.getElementById('cart-modal').remove();
        alert('Panier vid√©');
    }
};

window.checkoutCart = async function() {
    if (cart.length === 0) {
        alert('Votre panier est vide');
        return;
    }
    
    const deliveryDate = document.getElementById('cart-delivery-date').value;
    const notes = document.getElementById('cart-notes').value;
    
    if (!deliveryDate) {
        alert('Veuillez s√©lectionner une date de livraison');
        return;
    }
    
    // Grouper les articles par fournisseur
    const ordersBySupplier = {};
    cart.forEach(item => {
        if (!ordersBySupplier[item.supplierId]) {
            ordersBySupplier[item.supplierId] = {
                supplierId: item.supplierId,
                supplierName: item.supplierName,
                items: []
            };
        }
        ordersBySupplier[item.supplierId].items.push({
            productId: item.productId,
            quantity: item.quantity
        });
    });
    
    try {
        // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
        const orderResults = [];
        
        // Cr√©er une commande pour chaque fournisseur
        for (const supplierId in ordersBySupplier) {
            const orderGroup = ordersBySupplier[supplierId];
            
            const orderData = {
                supplier: supplierId,
                items: orderGroup.items,
                deliveryDate: deliveryDate,
                notes: notes
            };
            
            const response = await fetch('/api/orders', {
                credentials: 'include', // üç™ Cookie HTTP-Only
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
},
                body: JSON.stringify(orderData)
            });
            
            if (response.ok) {
                const result = await response.json();
                orderResults.push({
                    supplierName: orderGroup.supplierName,
                    orderNumber: result.data.orderNumber
                });
            } else {
                const error = await response.json();
                throw new Error(`Erreur pour ${orderGroup.supplierName}: ${error.message}`);
            }
        }
        
        // Afficher le r√©sum√© des commandes
        const summary = orderResults.map(order => 
            `‚úÖ ${order.supplierName}: ${order.orderNumber}`
        ).join('\\n');
        
        alert(`Commandes confirm√©es !\\n\\n${summary}\\n\\nLes fournisseurs recevront vos commandes et vous contacteront pour confirmer la livraison.`);
        
        // Vider le panier
        cart = [];
        updateCartCount();
        document.getElementById('cart-modal').remove();
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la validation du panier:', error);
        alert(`Erreur: ${error.message}`);
    }
};

// ========== SUIVI DES COMMANDES ==========

window.showMyOrders = async function() {
    console.log('üìã Affichage de mes commandes...');
    
    try {
        // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
        const response = await fetch('/api/orders', {
            credentials: 'include', // üç™ Cookie HTTP-Only
            headers: {
                // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error('Erreur lors du chargement des commandes');
        }
        
        const result = await response.json();
        const orders = result.data || [];
        console.log('‚úÖ Commandes charg√©es:', orders.length);
        
        displayMyOrdersModal(orders);
        
    } catch (error) {
        console.error('‚ùå Erreur lors du chargement des commandes:', error);
        alert('Erreur lors du chargement des commandes');
    }
};

function displayMyOrdersModal(orders) {
    const statusColors = {
        'pending': '#f39c12',
        'confirmed': '#3498db',
        'prepared': '#9b59b6',
        'delivered': '#27ae60',
        'cancelled': '#e74c3c'
    };
    
    const statusLabels = {
        'pending': 'En attente',
        'confirmed': 'Confirm√©e',
        'prepared': 'Pr√©par√©e',
        'delivered': 'Livr√©e',
        'cancelled': 'Annul√©e'
    };
    
    const statusIcons = {
        'pending': 'fa-clock',
        'confirmed': 'fa-check-circle',
        'prepared': 'fa-box',
        'delivered': 'fa-truck',
        'cancelled': 'fa-times-circle'
    };
    
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.id = 'my-orders-modal';
    modal.innerHTML = `
        <div class="modal-content order-modal" style="max-width: 1000px; max-height: 90vh; overflow-y: auto;">
            <div class="modal-header">
                <h2><i class="fas fa-receipt"></i> Mes Commandes</h2>
                <button class="modal-close" onclick="this.closest('.modal-overlay').remove()">&times;</button>
            </div>
            
            <div style="padding: 2rem;">
                ${orders.length === 0 ? `
                    <div style="text-align: center; padding: 3rem; color: #666;">
                        <i class="fas fa-inbox" style="font-size: 4rem; margin-bottom: 1rem; color: #ddd;"></i>
                        <p style="font-size: 1.2rem;">Aucune commande pour le moment</p>
                        <p>Commencez √† commander aupr√®s de vos fournisseurs !</p>
                    </div>
                ` : `
                    <div style="display: grid; gap: 1.5rem;">
                        ${orders.map(order => {
                            const supplierName = order.supplier?.businessName || order.supplier?.name || 'Fournisseur';
                            const orderDate = new Date(order.createdAt).toLocaleDateString('fr-FR', {
                                day: '2-digit',
                                month: 'long',
                                year: 'numeric'
                            });
                            const deliveryDate = order.delivery?.requestedDate ? 
                                new Date(order.delivery.requestedDate).toLocaleDateString('fr-FR', {
                                    day: '2-digit',
                                    month: 'long',
                                    year: 'numeric'
                                }) : 'Non sp√©cifi√©e';
                            
                            return `
                                <div style="border: 2px solid ${statusColors[order.status]}; border-radius: 12px; padding: 1.5rem; background: white; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 1rem; padding-bottom: 1rem; border-bottom: 2px solid #eee;">
                                        <div>
                                            <h3 style="margin: 0 0 0.5rem 0; color: #2c3e50; font-size: 1.3rem;">
                                                <i class="fas fa-file-invoice"></i> ${order.orderNumber}
                                            </h3>
                                            <p style="margin: 0.25rem 0; color: #666;">
                                                <i class="fas fa-store"></i> <strong>Fournisseur:</strong> ${supplierName}
                                            </p>
                                            <p style="margin: 0.25rem 0; color: #666;">
                                                <i class="fas fa-calendar"></i> <strong>Command√© le:</strong> ${orderDate}
                                            </p>
                                            <p style="margin: 0.25rem 0; color: #666;">
                                                <i class="fas fa-truck"></i> <strong>Livraison pr√©vue:</strong> ${deliveryDate}
                                            </p>
                                        </div>
                                        <div style="text-align: right;">
                                            <span style="background: ${statusColors[order.status]}; color: white; padding: 0.75rem 1.5rem; border-radius: 25px; font-size: 1rem; font-weight: bold; display: inline-flex; align-items: center; gap: 0.5rem;">
                                                <i class="fas ${statusIcons[order.status]}"></i>
                                                ${statusLabels[order.status]}
                                            </span>
                                            <div style="margin-top: 1rem; font-size: 1.5rem; font-weight: bold; color: #27ae60;">
                                                ${order.pricing.total.toFixed(2)}‚Ç¨
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                                        <h4 style="margin: 0 0 0.75rem 0; color: #2c3e50;">
                                            <i class="fas fa-box-open"></i> Articles command√©s (${order.items.length})
                                        </h4>
                                        <div style="display: grid; gap: 0.5rem;">
                                            ${order.items.map(item => `
                                                <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.5rem; background: white; border-radius: 4px;">
                                                    <div>
                                                        <strong style="color: #2c3e50;">${item.productName || item.product?.name || 'Produit'}</strong>
                                                        <div style="color: #666; font-size: 0.9em;">
                                                            ${item.quantity} ${item.unit} √ó ${item.unitPrice.toFixed(2)}‚Ç¨
                                                        </div>
                                                    </div>
                                                    <div style="font-weight: bold; color: #2c3e50; font-size: 1.1em;">
                                                        ${item.totalPrice.toFixed(2)}‚Ç¨
                                                    </div>
                                                </div>
                                            `).join('')}
                                        </div>
                                    </div>
                                    
                                    ${order.notes?.customer ? `
                                        <div style="background: #fff3cd; padding: 1rem; border-radius: 8px; border-left: 4px solid #ffc107; margin-bottom: 1rem;">
                                            <strong><i class="fas fa-sticky-note"></i> Vos notes:</strong><br>
                                            ${order.notes.customer}
                                        </div>
                                    ` : ''}
                                    
                                    ${order.status === 'pending' || order.status === 'confirmed' ? `
                                        <div style="display: flex; gap: 0.5rem; justify-content: flex-end;">
                                            <button onclick="cancelMyOrder('${order._id}')" 
                                                    style="background: #e74c3c; color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer; font-weight: 600; display: flex; align-items: center; gap: 0.5rem;">
                                                <i class="fas fa-times"></i> Annuler la commande
                                            </button>
                                        </div>
                                    ` : ''}
                                    
                                    ${order.status === 'delivered' ? `
                                        <div style="background: #d4edda; padding: 1rem; border-radius: 8px; border-left: 4px solid #28a745; text-align: center;">
                                            <i class="fas fa-check-circle" style="color: #28a745; font-size: 1.5rem;"></i>
                                            <strong style="color: #155724; margin-left: 0.5rem;">Commande livr√©e avec succ√®s !</strong>
                                        </div>
                                    ` : ''}
                                    
                                    ${order.status === 'cancelled' ? `
                                        <div style="background: #f8d7da; padding: 1rem; border-radius: 8px; border-left: 4px solid #dc3545; text-align: center;">
                                            <i class="fas fa-times-circle" style="color: #dc3545; font-size: 1.5rem;"></i>
                                            <strong style="color: #721c24; margin-left: 0.5rem;">Commande annul√©e</strong>
                                        </div>
                                    ` : ''}
                                </div>
                            `;
                        }).join('')}
                    </div>
                `}
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
}

window.cancelMyOrder = async function(orderId) {
    if (!confirm('√ätes-vous s√ªr de vouloir annuler cette commande ?')) {
        return;
    }
    
    try {
        // üç™ Token g√©r√© via cookie HTTP-Only (pas besoin de le r√©cup√©rer)
        const response = await fetch(`/api/orders/${orderId}/cancel`, {
            credentials: 'include', // üç™ Cookie HTTP-Only
            method: 'PUT',
            headers: {
                // üç™ Authorization via cookie HTTP-Only (header Authorization supprim√©)
'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error('Erreur lors de l\'annulation');
        }
        
        alert('Commande annul√©e');
        
        // Fermer et rouvrir la modal
        document.getElementById('my-orders-modal').remove();
        await showMyOrders();
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'annulation:', error);
        alert('Erreur lors de l\'annulation de la commande');
    }
};